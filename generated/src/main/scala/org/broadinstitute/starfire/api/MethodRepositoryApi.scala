/**
 * FireCloud
 * Genome analysis execution service. 
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.broadinstitute.starfire.api

import org.broadinstitute.starfire.model.Body
import org.broadinstitute.starfire.model.Body._
import org.broadinstitute.starfire.model.ConfigurationQuery
import org.broadinstitute.starfire.model.ConfigurationQuery._
import org.broadinstitute.starfire.model.ConfigurationResponse
import org.broadinstitute.starfire.model.ConfigurationResponse._
import org.broadinstitute.starfire.model.ConfigurationResponseWithPayloadObject
import org.broadinstitute.starfire.model.ConfigurationResponseWithPayloadObject._
import org.broadinstitute.starfire.model.CopyConfigurationIngest
import org.broadinstitute.starfire.model.CopyConfigurationIngest._
import org.broadinstitute.starfire.model.Error
import org.broadinstitute.starfire.model.Error._
import org.broadinstitute.starfire.model.ErrorReport
import org.broadinstitute.starfire.model.ErrorReport._
import org.broadinstitute.starfire.model.MethodAclPair
import org.broadinstitute.starfire.model.MethodAclPair._
import org.broadinstitute.starfire.model.MethodConfigACL
import org.broadinstitute.starfire.model.MethodConfigACL._
import org.broadinstitute.starfire.model.MethodDefinition
import org.broadinstitute.starfire.model.MethodDefinition._
import org.broadinstitute.starfire.model.MethodID
import org.broadinstitute.starfire.model.MethodID._
import org.broadinstitute.starfire.model.MethodQuery
import org.broadinstitute.starfire.model.MethodQuery._
import org.broadinstitute.starfire.model.MethodResponse
import org.broadinstitute.starfire.model.MethodResponse._
import org.broadinstitute.starfire.model.PublishConfigurationIngest
import org.broadinstitute.starfire.model.PublishConfigurationIngest._

import sttp.client._
import sttp.client.circe._
import io.circe.generic.auto._

import io.swagger.client.Decoders._
import io.swagger.client.Encoders._
import io.swagger.client.SttpUtils.Implicits._

class MethodRepositoryApi() {

  /**
   * Redact a single configuration.
   * Redacts a configuration and all of its associated configurations 
   *
   * @param namespace Method Configuration Namespace 
   * @param name Method Configuration Name 
   * @param snapshotId Method Configuration snapshot ID 
   * @return Option[Integer]
   */
  def apiConfigurationsNamespaceNameSnapshotIdDelete(
    namespace: String,
    name: String,
    snapshotId: String): Request[Either[ResponseError[io.circe.Error],Integer],Nothing] = {
    assert(namespace != null, "Missing required parameter 'namespace' when calling MethodRepositoryApi->apiConfigurationsNamespaceNameSnapshotIdDelete")
    assert(name != null, "Missing required parameter 'name' when calling MethodRepositoryApi->apiConfigurationsNamespaceNameSnapshotIdDelete")
    assert(snapshotId != null, "Missing required parameter 'snapshotId' when calling MethodRepositoryApi->apiConfigurationsNamespaceNameSnapshotIdDelete")

    basicRequest
      .delete(uri"https://localhost/api/configurations/${namespace}/${name}/${snapshotId}")
      .response(asJson[Integer])
  }

  /**
   * Add a configuration.
   * Inserts a method configuration into the method repository and gives the owner full access permissions. Must supply a namespace, name, payload, and entityType. Cannot supply a snapshotId 
   *
   * @param body Agora Entity (optional)
   * @return Option[ConfigurationResponse]
   */
  def apiConfigurationsPost(
    body: Option[ConfigurationQuery] = None
    ): Request[Either[ResponseError[io.circe.Error],ConfigurationResponse],Nothing] = {

    basicRequest
      .post(uri"https://localhost/api/configurations")
      .body(body)
      .response(asJson[ConfigurationResponse])
  }

  /**
   * List method definitions
   * List method definitions - i.e. unique namespace/name pairs - with counts of snapshots and associated configurations 
   *
   * @return Option[List[MethodDefinition]]
   */
  def apiMethodsDefinitionsGet(
    ): Request[Either[ResponseError[io.circe.Error],List[MethodDefinition]],Nothing] = {

    basicRequest
      .get(uri"https://localhost/api/methods/definitions")
      .response(asJson[List[MethodDefinition]])
  }

  /**
   * List configurations associated with a method
   * Given the namespace/name of a method, returns all configurations in the repository that reference that method 
   *
   * @param namespace Namespace of method. 
   * @param name Name of method. 
   * @return Option[List[ConfigurationResponseWithPayloadObject]]
   */
  def apiMethodsNamespaceNameConfigurationsGet(
    namespace: String,
    name: String): Request[Either[ResponseError[io.circe.Error],List[ConfigurationResponseWithPayloadObject]],Nothing] = {
    assert(namespace != null, "Missing required parameter 'namespace' when calling MethodRepositoryApi->apiMethodsNamespaceNameConfigurationsGet")
    assert(name != null, "Missing required parameter 'name' when calling MethodRepositoryApi->apiMethodsNamespaceNameConfigurationsGet")

    basicRequest
      .get(uri"https://localhost/api/methods/${namespace}/${name}/configurations")
      .response(asJson[List[ConfigurationResponseWithPayloadObject]])
  }

  /**
   * List compatible configurations for this method snapshot
   * Returns all configurations that 1. have the exact same input and output arguments as the supplied method snapshot, and 2. reference any snapshot of this method. 
   *
   * @param namespace Method Namespace 
   * @param name Method Name 
   * @param snapshotId Method snapshot ID 
   * @return Option[List[ConfigurationResponseWithPayloadObject]]
   */
  def apiMethodsNamespaceNameSnapshotIdConfigurationsGet(
    namespace: String,
    name: String,
    snapshotId: String): Request[Either[ResponseError[io.circe.Error],List[ConfigurationResponseWithPayloadObject]],Nothing] = {
    assert(namespace != null, "Missing required parameter 'namespace' when calling MethodRepositoryApi->apiMethodsNamespaceNameSnapshotIdConfigurationsGet")
    assert(name != null, "Missing required parameter 'name' when calling MethodRepositoryApi->apiMethodsNamespaceNameSnapshotIdConfigurationsGet")
    assert(snapshotId != null, "Missing required parameter 'snapshotId' when calling MethodRepositoryApi->apiMethodsNamespaceNameSnapshotIdConfigurationsGet")

    basicRequest
      .get(uri"https://localhost/api/methods/${namespace}/${name}/${snapshotId}/configurations")
      .response(asJson[List[ConfigurationResponseWithPayloadObject]])
  }

  /**
   * Redact a single method.
   * Redacts a method and all of its associated configurations 
   *
   * @param namespace Method Namespace 
   * @param name Method Name 
   * @param snapshotId Method snapshot ID 
   * @return Option[Integer]
   */
  def apiMethodsNamespaceNameSnapshotIdDelete(
    namespace: String,
    name: String,
    snapshotId: String): Request[Either[ResponseError[io.circe.Error],Integer],Nothing] = {
    assert(namespace != null, "Missing required parameter 'namespace' when calling MethodRepositoryApi->apiMethodsNamespaceNameSnapshotIdDelete")
    assert(name != null, "Missing required parameter 'name' when calling MethodRepositoryApi->apiMethodsNamespaceNameSnapshotIdDelete")
    assert(snapshotId != null, "Missing required parameter 'snapshotId' when calling MethodRepositoryApi->apiMethodsNamespaceNameSnapshotIdDelete")

    basicRequest
      .delete(uri"https://localhost/api/methods/${namespace}/${name}/${snapshotId}")
      .response(asJson[Integer])
  }

  /**
   * Find a single method.
   * Returns one method that matches the namespace, name, and snapshotId. 
   *
   * @param namespace Method Namespace 
   * @param name Method Name 
   * @param snapshotId Method snapshot ID 
   * @param onlyPayload Boolean to return only the payload of the method. (optional, default to false)
   * @return Option[MethodResponse]
   */
  def apiMethodsNamespaceNameSnapshotIdGet(
    namespace: String,
    name: String,
    snapshotId: String,
    onlyPayload: Option[Boolean] = Option(false)
    ): Request[Either[ResponseError[io.circe.Error],MethodResponse],Nothing] = {
    assert(namespace != null, "Missing required parameter 'namespace' when calling MethodRepositoryApi->apiMethodsNamespaceNameSnapshotIdGet")
    assert(name != null, "Missing required parameter 'name' when calling MethodRepositoryApi->apiMethodsNamespaceNameSnapshotIdGet")
    assert(snapshotId != null, "Missing required parameter 'snapshotId' when calling MethodRepositoryApi->apiMethodsNamespaceNameSnapshotIdGet")

    basicRequest
      .get(uri"https://localhost/api/methods/${namespace}/${name}/${snapshotId}?onlyPayload=${onlyPayload}")
      .response(asJson[MethodResponse])
  }

  /**
   * Create a new snapshot of an existing Method.
   * Inserts a new snapshot of the method into the method repository and copies access permissions from previous snapshot, optionally redacting the source snapshot. Documentation, synopsis, and payload are the only arguments considered for the new snapshot; everything else is copied from the source. 
   *
   * @param namespace Method Namespace 
   * @param name Method Name 
   * @param snapshotId Method snapshot ID 
   * @param redact Should the source method be redacted? (optional, default to false)
   * @param body Agora Entity (optional)
   * @return Option[MethodResponse]
   */
  def apiMethodsNamespaceNameSnapshotIdPost(
    namespace: String,
    name: String,
    snapshotId: String,
    redact: Option[Boolean] = Option(false),
    body: Option[Body] = None
    ): Request[Either[ResponseError[io.circe.Error],MethodResponse],Nothing] = {
    assert(namespace != null, "Missing required parameter 'namespace' when calling MethodRepositoryApi->apiMethodsNamespaceNameSnapshotIdPost")
    assert(name != null, "Missing required parameter 'name' when calling MethodRepositoryApi->apiMethodsNamespaceNameSnapshotIdPost")
    assert(snapshotId != null, "Missing required parameter 'snapshotId' when calling MethodRepositoryApi->apiMethodsNamespaceNameSnapshotIdPost")

    basicRequest
      .post(uri"https://localhost/api/methods/${namespace}/${name}/${snapshotId}?redact=${redact}")
      .body(body)
      .response(asJson[MethodResponse])
  }

  /**
   * Add a Method.
   * Inserts a method into the method repository and gives the owner full access permissions. Must supply a namespace name, payload, and entityType. Cannot supply a snapshotId 
   *
   * @param body Agora Entity (optional)
   * @return Option[MethodResponse]
   */
  def apiMethodsPost(
    body: Option[MethodQuery] = None
    ): Request[Either[ResponseError[io.circe.Error],MethodResponse],Nothing] = {

    basicRequest
      .post(uri"https://localhost/api/methods")
      .body(body)
      .response(asJson[MethodResponse])
  }

  /**
   * Copy a Method Repository Configuration into a workspace
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @param configToCopy Method Configuration to Copy 
   * @return Option[Unit]
   */
  def copyFromMethodRepo(
    workspaceNamespace: String,
    workspaceName: String,
    configToCopy: CopyConfigurationIngest): Request[Either[ResponseError[io.circe.Error],Unit],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling MethodRepositoryApi->copyFromMethodRepo")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling MethodRepositoryApi->copyFromMethodRepo")
    assert(configToCopy != null, "Missing required parameter 'configToCopy' when calling MethodRepositoryApi->copyFromMethodRepo")

    basicRequest
      .post(uri"https://localhost/api/workspaces/${workspaceNamespace}/${workspaceName}/method_configs/copyFromMethodRepo")
      .body(configToCopy)
      .response(asJson[Unit])
  }

  /**
   * Copy a Method Config in a workspace to the Method Repository
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @param configToCopy Method Configuration to Copy 
   * @return Option[Unit]
   */
  def copyToMethodRepo(
    workspaceNamespace: String,
    workspaceName: String,
    configToCopy: PublishConfigurationIngest): Request[Either[ResponseError[io.circe.Error],Unit],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling MethodRepositoryApi->copyToMethodRepo")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling MethodRepositoryApi->copyToMethodRepo")
    assert(configToCopy != null, "Missing required parameter 'configToCopy' when calling MethodRepositoryApi->copyToMethodRepo")

    basicRequest
      .post(uri"https://localhost/api/workspaces/${workspaceNamespace}/${workspaceName}/method_configs/copyToMethodRepo")
      .body(configToCopy)
      .response(asJson[Unit])
  }

  /**
   * Create a Method Configuration template from a Method
   * 
   *
   * @param methodName name of Method to use for template 
   * @return Option[Unit]
   */
  def createMethodTemplate(
    methodName: MethodID): Request[Either[ResponseError[io.circe.Error],Unit],Nothing] = {
    assert(methodName != null, "Missing required parameter 'methodName' when calling MethodRepositoryApi->createMethodTemplate")

    basicRequest
      .post(uri"https://localhost/api/template")
      .body(methodName)
      .response(asJson[Unit])
  }

  /**
   * get ACL permissions on a Method Repository configuration
   * 
   *
   * @param namespace Method Configuration Namespace 
   * @param name Method Configuration Name 
   * @param snapshotId Method Configuration snapshot ID 
   * @return Option[MethodConfigACL]
   */
  def getConfigACL(
    namespace: String,
    name: String,
    snapshotId: String): Request[Either[ResponseError[io.circe.Error],MethodConfigACL],Nothing] = {
    assert(namespace != null, "Missing required parameter 'namespace' when calling MethodRepositoryApi->getConfigACL")
    assert(name != null, "Missing required parameter 'name' when calling MethodRepositoryApi->getConfigACL")
    assert(snapshotId != null, "Missing required parameter 'snapshotId' when calling MethodRepositoryApi->getConfigACL")

    basicRequest
      .get(uri"https://localhost/api/configurations/${namespace}/${name}/${snapshotId}/permissions")
      .response(asJson[MethodConfigACL])
  }

  /**
   * get ACL permissions on a Method Repository Configuration Namespace
   * 
   *
   * @param namespace Method Configuration Namespace 
   * @return Option[MethodConfigACL]
   */
  def getConfigNamespaceACL(
    namespace: String): Request[Either[ResponseError[io.circe.Error],MethodConfigACL],Nothing] = {
    assert(namespace != null, "Missing required parameter 'namespace' when calling MethodRepositoryApi->getConfigNamespaceACL")

    basicRequest
      .get(uri"https://localhost/api/configurations/${namespace}/permissions")
      .response(asJson[MethodConfigACL])
  }

  /**
   * get ACL permissions on a Method Repository method
   * 
   *
   * @param namespace Method Namespace 
   * @param name Method Name 
   * @param snapshotId Method snapshot ID 
   * @return Option[MethodConfigACL]
   */
  def getMethodACL(
    namespace: String,
    name: String,
    snapshotId: String): Request[Either[ResponseError[io.circe.Error],MethodConfigACL],Nothing] = {
    assert(namespace != null, "Missing required parameter 'namespace' when calling MethodRepositoryApi->getMethodACL")
    assert(name != null, "Missing required parameter 'name' when calling MethodRepositoryApi->getMethodACL")
    assert(snapshotId != null, "Missing required parameter 'snapshotId' when calling MethodRepositoryApi->getMethodACL")

    basicRequest
      .get(uri"https://localhost/api/methods/${namespace}/${name}/${snapshotId}/permissions")
      .response(asJson[MethodConfigACL])
  }

  /**
   * Get information about a method&#39;s inputs and outputs
   * 
   *
   * @param methodName name of Method to look up 
   * @return Option[Unit]
   */
  def getMethodIO(
    methodName: MethodID): Request[Either[ResponseError[io.circe.Error],Unit],Nothing] = {
    assert(methodName != null, "Missing required parameter 'methodName' when calling MethodRepositoryApi->getMethodIO")

    basicRequest
      .post(uri"https://localhost/api/inputsOutputs")
      .body(methodName)
      .response(asJson[Unit])
  }

  /**
   * get ACL permissions on a Method Repository Method Namespace
   * 
   *
   * @param namespace Method Namespace 
   * @return Option[MethodConfigACL]
   */
  def getMethodNamespaceACL(
    namespace: String): Request[Either[ResponseError[io.circe.Error],MethodConfigACL],Nothing] = {
    assert(namespace != null, "Missing required parameter 'namespace' when calling MethodRepositoryApi->getMethodNamespaceACL")

    basicRequest
      .get(uri"https://localhost/api/methods/${namespace}/permissions")
      .response(asJson[MethodConfigACL])
  }

  /**
   * Get a Method Repository configuration
   * 
   *
   * @param namespace Method Configuration Namespace 
   * @param name Method Configuration Name 
   * @param snapshotId Method Configuration snapshot ID 
   * @param payloadAsObject Instead of returning a string under key payload, return a JSON object under key payloadObject (optional, default to false)
   * @return Option[ConfigurationResponse]
   */
  def getMethodRepositoryConfiguration(
    namespace: String,
    name: String,
    snapshotId: String,
    payloadAsObject: Option[Boolean] = Option(false)
    ): Request[Either[ResponseError[io.circe.Error],ConfigurationResponse],Nothing] = {
    assert(namespace != null, "Missing required parameter 'namespace' when calling MethodRepositoryApi->getMethodRepositoryConfiguration")
    assert(name != null, "Missing required parameter 'name' when calling MethodRepositoryApi->getMethodRepositoryConfiguration")
    assert(snapshotId != null, "Missing required parameter 'snapshotId' when calling MethodRepositoryApi->getMethodRepositoryConfiguration")

    basicRequest
      .get(uri"https://localhost/api/configurations/${namespace}/${name}/${snapshotId}?payloadAsObject=${payloadAsObject}")
      .response(asJson[ConfigurationResponse])
  }

  /**
   * List Method Repository configurations. 
   * The configurations endpoint returns all configurations the requester has permissions to read that fit the filter criteria. 
   *
   * @param namespace Namespace of configuration. (optional)
   * @param name Name of configuration. (optional)
   * @param snapshotId Snapshot ID of configuration. (optional)
   * @param snapshotComment Snapshot comment of AgoraEntity (optional)
   * @param synopsis Synopsis of configuration. (optional)
   * @param documentation Documentation of configuration. (optional)
   * @param owner Owner of configuration. (optional)
   * @param payload Payload of configuration in WDL. (optional)
   * @param entityType Type of configuration - Task or Workflow (optional)
   * @return Option[List[ConfigurationResponse]]
   */
  def listMethodRepositoryConfigurations(
    namespace: Option[String] = None,
    name: Option[String] = None,
    snapshotId: Option[Integer] = None,
    snapshotComment: Option[String] = None,
    synopsis: Option[String] = None,
    documentation: Option[String] = None,
    owner: Option[String] = None,
    payload: Option[String] = None,
    entityType: Option[String] = None
    ): Request[Either[ResponseError[io.circe.Error],List[ConfigurationResponse]],Nothing] = {

    basicRequest
      .get(uri"https://localhost/api/configurations?namespace=${namespace}?name=${name}?snapshotId=${snapshotId}?snapshotComment=${snapshotComment}?synopsis=${synopsis}?documentation=${documentation}?owner=${owner}?payload=${payload}?entityType=${entityType}")
      .response(asJson[List[ConfigurationResponse]])
  }

  /**
   * Lists Method Repository methods. 
   * 
   *
   * @param namespace Namespace of method. (optional)
   * @param name Name of method. (optional)
   * @param snapshotId Snapshot ID of method. (optional)
   * @param snapshotComment Snapshot comment of AgoraEntity (optional)
   * @param synopsis Synopsis of method. (optional)
   * @param documentation Documentation of method. (optional)
   * @param owner Owner of method. (optional)
   * @param payload Payload of method in WDL. (optional)
   * @param entityType Type of Method - Task or Workflow (optional)
   * @return Option[List[MethodResponse]]
   */
  def listMethodRepositoryMethods(
    namespace: Option[String] = None,
    name: Option[String] = None,
    snapshotId: Option[Integer] = None,
    snapshotComment: Option[String] = None,
    synopsis: Option[String] = None,
    documentation: Option[String] = None,
    owner: Option[String] = None,
    payload: Option[String] = None,
    entityType: Option[String] = None
    ): Request[Either[ResponseError[io.circe.Error],List[MethodResponse]],Nothing] = {

    basicRequest
      .get(uri"https://localhost/api/methods?namespace=${namespace}?name=${name}?snapshotId=${snapshotId}?snapshotComment=${snapshotComment}?synopsis=${synopsis}?documentation=${documentation}?owner=${owner}?payload=${payload}?entityType=${entityType}")
      .response(asJson[List[MethodResponse]])
  }

  /**
   * set ACLs for multiple methods in one call
   * 
   *
   * @param methodacls method acls to upsert 
   * @return Option[List[MethodAclPair]]
   */
  def multiUpsertMethodsACL(
    methodacls: List[MethodAclPair]): Request[Either[ResponseError[io.circe.Error],List[MethodAclPair]],Nothing] = {
    assert(methodacls != null, "Missing required parameter 'methodacls' when calling MethodRepositoryApi->multiUpsertMethodsACL")

    basicRequest
      .put(uri"https://localhost/api/methods/permissions")
      .body(methodacls)
      .response(asJson[List[MethodAclPair]])
  }

  /**
   * set ACL permissions on a Method Repository configuration
   * 
   *
   * @param namespace Method Configuration Namespace 
   * @param name Method Configuration Name 
   * @param snapshotId Method Configuration snapshot ID 
   * @param payload the ACLs to upsert 
   * @return Option[MethodConfigACL]
   */
  def setConfigACL(
    namespace: String,
    name: String,
    snapshotId: String,
    payload: MethodConfigACL): Request[Either[ResponseError[io.circe.Error],MethodConfigACL],Nothing] = {
    assert(namespace != null, "Missing required parameter 'namespace' when calling MethodRepositoryApi->setConfigACL")
    assert(name != null, "Missing required parameter 'name' when calling MethodRepositoryApi->setConfigACL")
    assert(snapshotId != null, "Missing required parameter 'snapshotId' when calling MethodRepositoryApi->setConfigACL")
    assert(payload != null, "Missing required parameter 'payload' when calling MethodRepositoryApi->setConfigACL")

    basicRequest
      .post(uri"https://localhost/api/configurations/${namespace}/${name}/${snapshotId}/permissions")
      .body(payload)
      .response(asJson[MethodConfigACL])
  }

  /**
   * set ACL permissions on a Method Repository Configuration Namespace
   * 
   *
   * @param namespace Method Configuration Namespace 
   * @param payload the ACLs to upsert 
   * @return Option[List[MethodConfigACL]]
   */
  def setConfigNamespaceACL(
    namespace: String,
    payload: MethodConfigACL): Request[Either[ResponseError[io.circe.Error],List[MethodConfigACL]],Nothing] = {
    assert(namespace != null, "Missing required parameter 'namespace' when calling MethodRepositoryApi->setConfigNamespaceACL")
    assert(payload != null, "Missing required parameter 'payload' when calling MethodRepositoryApi->setConfigNamespaceACL")

    basicRequest
      .post(uri"https://localhost/api/configurations/${namespace}/permissions")
      .body(payload)
      .response(asJson[List[MethodConfigACL]])
  }

  /**
   * set ACL permissions on a Method Repository method
   * 
   *
   * @param namespace Method Namespace 
   * @param name Method Name 
   * @param snapshotId Method snapshot ID 
   * @param payload the ACLs to upsert 
   * @return Option[MethodConfigACL]
   */
  def setMethodACL(
    namespace: String,
    name: String,
    snapshotId: String,
    payload: MethodConfigACL): Request[Either[ResponseError[io.circe.Error],MethodConfigACL],Nothing] = {
    assert(namespace != null, "Missing required parameter 'namespace' when calling MethodRepositoryApi->setMethodACL")
    assert(name != null, "Missing required parameter 'name' when calling MethodRepositoryApi->setMethodACL")
    assert(snapshotId != null, "Missing required parameter 'snapshotId' when calling MethodRepositoryApi->setMethodACL")
    assert(payload != null, "Missing required parameter 'payload' when calling MethodRepositoryApi->setMethodACL")

    basicRequest
      .post(uri"https://localhost/api/methods/${namespace}/${name}/${snapshotId}/permissions")
      .body(payload)
      .response(asJson[MethodConfigACL])
  }

  /**
   * set ACL permissions on a Method Repository Method Namespace
   * 
   *
   * @param namespace Method Namespace 
   * @param payload the ACLs to upsert 
   * @return Option[MethodConfigACL]
   */
  def setMethodNamespaceACL(
    namespace: String,
    payload: MethodConfigACL): Request[Either[ResponseError[io.circe.Error],MethodConfigACL],Nothing] = {
    assert(namespace != null, "Missing required parameter 'namespace' when calling MethodRepositoryApi->setMethodNamespaceACL")
    assert(payload != null, "Missing required parameter 'payload' when calling MethodRepositoryApi->setMethodNamespaceACL")

    basicRequest
      .post(uri"https://localhost/api/methods/${namespace}/permissions")
      .body(payload)
      .response(asJson[MethodConfigACL])
  }

}

