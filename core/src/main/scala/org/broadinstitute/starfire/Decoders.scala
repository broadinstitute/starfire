/**
 * FireCloud
 * Genome analysis execution service. 
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.broadinstitute.starfire

import io.circe.{Decoder, DecodingFailure, HCursor}
import java.util.Date
import java.io.File
import java.text.SimpleDateFormat

import io.circe.Decoder.Result

object Decoders {

  val dateFormats: Seq[SimpleDateFormat] = Seq("dd/MM/yyyy").map(new SimpleDateFormat(_))

  def parseDate(string: String): Either[String, Date] = {
    var date: Date = null
    val dateFormatIter = dateFormats.iterator
    while (date == null && dateFormatIter.hasNext) {
      val dateFormat = dateFormatIter.next()
      date = dateFormat.parse(string)
    }
    if (date != null) {
      Right(date)
    } else {
      Left("Cannot parse date - unsupported format.")
    }
  }

  implicit val dateDecoder: Decoder[Date] = new Decoder[Date] {
    override def apply(cursor: HCursor): Result[Date] = {
      cursor.as[String].flatMap(parseDate(_).left.map(DecodingFailure(_, cursor.history)))
    }
  }

  implicit val fileDecoder: Decoder[File] = new Decoder[File] {
    override def apply(cursor: HCursor): Result[File] = {
      cursor.as[String].map(new File(_))
    }
  }
}