/**
 * FireCloud
 * Genome analysis execution service. 
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.broadinstitute.starfire.api

import org.broadinstitute.starfire.model.Error
import org.broadinstitute.starfire.model.Error._
import org.broadinstitute.starfire.model.Metadata
import org.broadinstitute.starfire.model.Metadata._
import org.broadinstitute.starfire.model.Tool
import org.broadinstitute.starfire.model.Tool._
import org.broadinstitute.starfire.model.ToolClass
import org.broadinstitute.starfire.model.ToolClass._
import org.broadinstitute.starfire.model.ToolDescriptor
import org.broadinstitute.starfire.model.ToolDescriptor._
import org.broadinstitute.starfire.model.ToolVersion
import org.broadinstitute.starfire.model.ToolVersion._

import sttp.client._
import sttp.client.circe._
import io.circe.generic.auto._

import io.swagger.sttp.utils.Decoders._
import io.swagger.sttp.utils.Encoders._
import io.swagger.sttp.utils.SttpUtils.Implicits._

object GA4GHToolRegistryApi {

  /**
   * Return some metadata that is useful for describing this registry
   * Return some metadata that is useful for describing this registry
   *
   * @return Option[Metadata]
   */
  def ga4ghV1MetadataGet(
    ): Request[Either[ResponseError[io.circe.Error],Metadata],Nothing] = {

    basicRequest
      .get(uri"https://api.firecloud.org/ga4gh/v1/metadata")
      .response(asJson[Metadata])
  }

  /**
   * List all tool types
   * This endpoint returns all tool-classes available 
   *
   * @return Option[List[ToolClass]]
   */
  def ga4ghV1ToolClassesGet(
    ): Request[Either[ResponseError[io.circe.Error],List[ToolClass]],Nothing] = {

    basicRequest
      .get(uri"https://api.firecloud.org/ga4gh/v1/tool-classes")
      .response(asJson[List[ToolClass]])
  }

  /**
   * List all tools
   * This endpoint returns all tools available. 
   *
   * @return Option[List[Tool]]
   */
  def ga4ghV1ToolsGet(
    ): Request[Either[ResponseError[io.circe.Error],List[Tool]],Nothing] = {

    basicRequest
      .get(uri"https://api.firecloud.org/ga4gh/v1/tools")
      .response(asJson[List[Tool]])
  }

  /**
   * List one specific tool, acts as an anchor for self references
   * This endpoint returns one specific tool (which has ToolVersions nested inside it)
   *
   * @param id A unique identifier of the tool, scoped to this registry, for example &#x60;123456&#x60; 
   * @return Option[Tool]
   */
  def ga4ghV1ToolsIdGet(
    id: String): Request[Either[ResponseError[io.circe.Error],Tool],Nothing] = {
    assert(id != null, "Missing required parameter 'id' when calling GA4GHToolRegistryApi->ga4ghV1ToolsIdGet")

    basicRequest
      .get(uri"https://api.firecloud.org/ga4gh/v1/tools/${id}")
      .response(asJson[Tool])
  }

  /**
   * List versions of a tool
   * Returns all versions of the specified tool
   *
   * @param id A unique identifier of the tool, scoped to this registry, for example &#x60;123456&#x60; 
   * @return Option[List[ToolVersion]]
   */
  def ga4ghV1ToolsIdVersionsGet(
    id: String): Request[Either[ResponseError[io.circe.Error],List[ToolVersion]],Nothing] = {
    assert(id != null, "Missing required parameter 'id' when calling GA4GHToolRegistryApi->ga4ghV1ToolsIdVersionsGet")

    basicRequest
      .get(uri"https://api.firecloud.org/ga4gh/v1/tools/${id}/versions")
      .response(asJson[List[ToolVersion]])
  }

  /**
   * List one specific tool version, acts as an anchor for self references
   * This endpoint returns one specific tool version
   *
   * @param id A unique identifier of the tool, scoped to this registry, for example &#x60;123456&#x60; 
   * @param versionId An identifier of the tool version, scoped to this registry, for example &#x60;v1&#x60; 
   * @return Option[ToolVersion]
   */
  def ga4ghV1ToolsIdVersionsVersionIdGet(
    id: String,
    versionId: String): Request[Either[ResponseError[io.circe.Error],ToolVersion],Nothing] = {
    assert(id != null, "Missing required parameter 'id' when calling GA4GHToolRegistryApi->ga4ghV1ToolsIdVersionsVersionIdGet")
    assert(versionId != null, "Missing required parameter 'versionId' when calling GA4GHToolRegistryApi->ga4ghV1ToolsIdVersionsVersionIdGet")

    basicRequest
      .get(uri"https://api.firecloud.org/ga4gh/v1/tools/${id}/versions/${versionId}")
      .response(asJson[ToolVersion])
  }

  /**
   * Get the tool descriptor (WDL) for the specified tool.
   * Returns the WDL descriptor for the specified tool.
   *
   * @param `type` The output type of the descriptor. If not specified it is up to the underlying implementation to determine which output type to return. Plain types return the bare descriptor while the \&quot;non-plain\&quot; types return a descriptor wrapped with metadata.  
   * @param id A unique identifier of the tool, scoped to this registry, for example &#x60;123456&#x60;.    *In FireCloud, this must be a namespace + \&quot;:\&quot; + name. For instance, if your namespace   is &#39;foo&#39; and name is &#39;bar&#39;, this must be &#39;foo:bar&#39;.*  
   * @param versionId An identifier of the tool version for this particular tool registry, for example &#x60;v1&#x60;.    *In FireCloud, this must be an integer representing the FireCloud snapshot id.*  
   * @return Option[ToolDescriptor]
   */
  def ga4ghV1ToolsIdVersionsVersionIdTypeDescriptorGet(
    `type`: String,
    id: String,
    versionId: String): Request[Either[ResponseError[io.circe.Error],ToolDescriptor],Nothing] = {
    assert(`type` != null, "Missing required parameter '`type`' when calling GA4GHToolRegistryApi->ga4ghV1ToolsIdVersionsVersionIdTypeDescriptorGet")
    assert(id != null, "Missing required parameter 'id' when calling GA4GHToolRegistryApi->ga4ghV1ToolsIdVersionsVersionIdTypeDescriptorGet")
    assert(versionId != null, "Missing required parameter 'versionId' when calling GA4GHToolRegistryApi->ga4ghV1ToolsIdVersionsVersionIdTypeDescriptorGet")

    basicRequest
      .get(uri"https://api.firecloud.org/ga4gh/v1/tools/${id}/versions/${versionId}/${`type`}/descriptor")
      .response(asJson[ToolDescriptor])
  }

}

