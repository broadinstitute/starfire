/**
 * FireCloud
 * Genome analysis execution service. 
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.broadinstitute.starfire.api

import org.broadinstitute.starfire.model.Consent
import org.broadinstitute.starfire.model.Consent._
import org.broadinstitute.starfire.model.ErrorReport
import org.broadinstitute.starfire.model.ErrorReport._
import org.broadinstitute.starfire.model.LibraryBulkIndexResponse
import org.broadinstitute.starfire.model.LibraryBulkIndexResponse._
import org.broadinstitute.starfire.model.LibraryMetadataInput
import org.broadinstitute.starfire.model.LibraryMetadataInput._
import org.broadinstitute.starfire.model.ResearchPurposeRequest
import org.broadinstitute.starfire.model.ResearchPurposeRequest._
import org.broadinstitute.starfire.model.SearchTermRef
import org.broadinstitute.starfire.model.SearchTermRef._
import org.broadinstitute.starfire.model.StringArray
import org.broadinstitute.starfire.model.StringArray._
import org.broadinstitute.starfire.model.StructuredDataRequest
import org.broadinstitute.starfire.model.StructuredDataRequest._
import org.broadinstitute.starfire.model.Workspace
import org.broadinstitute.starfire.model.Workspace._

import sttp.client._
import sttp.client.circe._
import io.circe.generic.auto._

import io.swagger.sttp.utils.Decoders._
import io.swagger.sttp.utils.Encoders._
import io.swagger.sttp.utils.SttpUtils.Implicits._

object LibraryApi {

  /**
   * Data Use Search ingest
   * The ingest API will take the answers to consent questions and return the elasticsearch structure to persist with the data reference.
   *
   * @param body Structured Data Request 
   * @return Option[Unit]
   */
  def dataIngest(
    body: StructuredDataRequest): Request[Either[ResponseError[io.circe.Error],Unit],Nothing] = {
    assert(body != null, "Missing required parameter 'body' when calling LibraryApi->dataIngest")

    basicRequest
      .post(uri"https://api.firecloud.org/duos/structuredData")
      .body(body)
      .response(asJson[Unit])
  }

  /**
   * Passes through to DUOS&#39; autocomplete method to select ontology terms of disease type that match the query term. 
   * 
   *
   * @param queryTerm The query term (word fragment) which the service should try and complete. 
   * @return Option[Unit]
   */
  def duosAutocomplete(
    queryTerm: String): Request[Either[ResponseError[io.circe.Error],Unit],Nothing] = {
    assert(queryTerm != null, "Missing required parameter 'queryTerm' when calling LibraryApi->duosAutocomplete")

    basicRequest
      .get(uri"https://api.firecloud.org/duos/autocomplete/${queryTerm}")
      .response(asJson[Unit])
  }

  /**
   * Find Consent by ORSP ID
   * 
   *
   * @param orspId Finds the consent for the provided ORSP ID. 
   * @return Option[Consent]
   */
  def duosConsentOrspId(
    orspId: String): Request[Either[ResponseError[io.circe.Error],Consent],Nothing] = {
    assert(orspId != null, "Missing required parameter 'orspId' when calling LibraryApi->duosConsentOrspId")

    basicRequest
      .get(uri"https://api.firecloud.org/api/duos/consent/orsp/${orspId}")
      .response(asJson[Consent])
  }

  /**
   * Generates an ElasticSearch clause for filtering by research purpose
   * 
   *
   * @param body Research Purpose Request 
   * @return Option[Unit]
   */
  def duosResearchPurposeQuery(
    body: ResearchPurposeRequest): Request[Either[ResponseError[io.circe.Error],Unit],Nothing] = {
    assert(body != null, "Missing required parameter 'body' when calling LibraryApi->duosResearchPurposeQuery")

    basicRequest
      .post(uri"https://api.firecloud.org/duos/researchPurposeQuery")
      .body(body)
      .response(asJson[Unit])
  }

  /**
   * searches published library datasets 
   * 
   *
   * @param searchParams Search terms and pagination parameters (optional)
   * @return Option[Unit]
   */
  def findDocuments(
    searchParams: Option[SearchTermRef] = None
    ): Request[Either[ResponseError[io.circe.Error],Unit],Nothing] = {

    basicRequest
      .post(uri"https://api.firecloud.org/api/library/search")
      .body(searchParams)
      .response(asJson[Unit])
  }

  /**
   * get the groups that can discover this library dataset 
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @return Option[StringArray]
   */
  def getDiscoverableGroups(
    workspaceNamespace: String,
    workspaceName: String): Request[Either[ResponseError[io.circe.Error],StringArray],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling LibraryApi->getDiscoverableGroups")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling LibraryApi->getDiscoverableGroups")

    basicRequest
      .get(uri"https://api.firecloud.org/api/library/${workspaceNamespace}/${workspaceName}/discoverableGroups")
      .response(asJson[StringArray])
  }

  /**
   * get the entire metadata for a library dataset 
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @return Option[LibraryMetadataInput]
   */
  def getLibraryMetadata(
    workspaceNamespace: String,
    workspaceName: String): Request[Either[ResponseError[io.circe.Error],LibraryMetadataInput],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling LibraryApi->getLibraryMetadata")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling LibraryApi->getLibraryMetadata")

    basicRequest
      .get(uri"https://api.firecloud.org/api/library/${workspaceNamespace}/${workspaceName}/metadata")
      .response(asJson[LibraryMetadataInput])
  }

  /**
   * returns groups that can be used for discoverable datasets 
   * 
   *
   * @return Option[List[String]]
   */
  def groups(
    ): Request[Either[ResponseError[io.circe.Error],List[String]],Nothing] = {

    basicRequest
      .get(uri"https://api.firecloud.org/api/library/groups")
      .response(asJson[List[String]])
  }

  /**
   * suggestions for populating a field 
   * 
   *
   * @param field the property to get suggestions for 
   * @param q the initial text to complete 
   * @return Option[Unit]
   */
  def populateSuggest(
    field: String,
    q: String): Request[Either[ResponseError[io.circe.Error],Unit],Nothing] = {
    assert(field != null, "Missing required parameter 'field' when calling LibraryApi->populateSuggest")
    assert(q != null, "Missing required parameter 'q' when calling LibraryApi->populateSuggest")

    basicRequest
      .get(uri"https://api.firecloud.org/api/library/populate/suggest/${field}?q=${q}")
      .response(asJson[Unit])
  }

  /**
   * publish the workspace in the Library 
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @return Option[Workspace]
   */
  def publishLibraryWorkspace(
    workspaceNamespace: String,
    workspaceName: String): Request[Either[ResponseError[io.circe.Error],Workspace],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling LibraryApi->publishLibraryWorkspace")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling LibraryApi->publishLibraryWorkspace")

    basicRequest
      .post(uri"https://api.firecloud.org/api/library/${workspaceNamespace}/${workspaceName}/published")
      .response(asJson[Workspace])
  }

  /**
   * put the entire metadata for a library dataset 
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @param libraryMetadataJson Library metadata 
   * @param validate Should the payload be validated? Validation is always enabled for published datasets and defaults to false for unpublished datasets.  (optional)
   * @return Option[Workspace]
   */
  def putLibraryMetadata(
    workspaceNamespace: String,
    workspaceName: String,
    libraryMetadataJson: LibraryMetadataInput,
    validate: Option[Boolean] = None
    ): Request[Either[ResponseError[io.circe.Error],Workspace],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling LibraryApi->putLibraryMetadata")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling LibraryApi->putLibraryMetadata")
    assert(libraryMetadataJson != null, "Missing required parameter 'libraryMetadataJson' when calling LibraryApi->putLibraryMetadata")

    basicRequest
      .put(uri"https://api.firecloud.org/api/library/${workspaceNamespace}/${workspaceName}/metadata?validate=${validate}")
      .body(libraryMetadataJson)
      .response(asJson[Workspace])
  }

  /**
   * deletes and rebuilds the entire index of published library datasets 
   * 
   *
   * @return Option[LibraryBulkIndexResponse]
   */
  def reindexAll(
    ): Request[Either[ResponseError[io.circe.Error],LibraryBulkIndexResponse],Nothing] = {

    basicRequest
      .post(uri"https://api.firecloud.org/api/library/admin/reindex")
      .response(asJson[LibraryBulkIndexResponse])
  }

  /**
   * search suggestions 
   * 
   *
   * @param searchParams Search terms and pagination parameters (optional)
   * @return Option[Unit]
   */
  def searchSuggest(
    searchParams: Option[SearchTermRef] = None
    ): Request[Either[ResponseError[io.circe.Error],Unit],Nothing] = {

    basicRequest
      .post(uri"https://api.firecloud.org/api/library/suggest")
      .body(searchParams)
      .response(asJson[Unit])
  }

  /**
   * unpublish the workspace in the Library 
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @return Option[Workspace]
   */
  def unpublishLibraryWorkspace(
    workspaceNamespace: String,
    workspaceName: String): Request[Either[ResponseError[io.circe.Error],Workspace],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling LibraryApi->unpublishLibraryWorkspace")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling LibraryApi->unpublishLibraryWorkspace")

    basicRequest
      .delete(uri"https://api.firecloud.org/api/library/${workspaceNamespace}/${workspaceName}/published")
      .response(asJson[Workspace])
  }

  /**
   * set the groups that can discover this library dataset 
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @param discoverableGroups Json array of group names, or empty array for no restrictions 
   * @return Option[Workspace]
   */
  def updateDiscoverableGroups(
    workspaceNamespace: String,
    workspaceName: String,
    discoverableGroups: StringArray): Request[Either[ResponseError[io.circe.Error],Workspace],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling LibraryApi->updateDiscoverableGroups")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling LibraryApi->updateDiscoverableGroups")
    assert(discoverableGroups != null, "Missing required parameter 'discoverableGroups' when calling LibraryApi->updateDiscoverableGroups")

    basicRequest
      .put(uri"https://api.firecloud.org/api/library/${workspaceNamespace}/${workspaceName}/discoverableGroups")
      .body(discoverableGroups)
      .response(asJson[Workspace])
  }

}

