/**
 * FireCloud
 * Genome analysis execution service. 
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.broadinstitute.starfire.api

import org.broadinstitute.starfire.model.AttributeUpdateOperation
import org.broadinstitute.starfire.model.AttributeUpdateOperation._
import org.broadinstitute.starfire.model.ErrorReport
import org.broadinstitute.starfire.model.ErrorReport._
import better.files.File
import better.files.File._
import io.circe.Json
import io.circe.Json._
import org.broadinstitute.starfire.model.ManagedGroupAccessInstructions
import org.broadinstitute.starfire.model.ManagedGroupAccessInstructions._
import org.broadinstitute.starfire.model.NewMethodConfigIngest
import org.broadinstitute.starfire.model.NewMethodConfigIngest._
import org.broadinstitute.starfire.model.PermissionReport
import org.broadinstitute.starfire.model.PermissionReport._
import org.broadinstitute.starfire.model.PermissionReportRequest
import org.broadinstitute.starfire.model.PermissionReportRequest._
import org.broadinstitute.starfire.model.StringArray
import org.broadinstitute.starfire.model.StringArray._
import org.broadinstitute.starfire.model.WorkspaceACL
import org.broadinstitute.starfire.model.WorkspaceACL._
import org.broadinstitute.starfire.model.WorkspaceACLUpdate
import org.broadinstitute.starfire.model.WorkspaceACLUpdate._
import org.broadinstitute.starfire.model.WorkspaceACLUpdateResponseList
import org.broadinstitute.starfire.model.WorkspaceACLUpdateResponseList._
import org.broadinstitute.starfire.model.WorkspaceBucketOptions
import org.broadinstitute.starfire.model.WorkspaceBucketOptions._
import org.broadinstitute.starfire.model.WorkspaceCatalog
import org.broadinstitute.starfire.model.WorkspaceCatalog._
import org.broadinstitute.starfire.model.WorkspaceCatalogUpdateResponseList
import org.broadinstitute.starfire.model.WorkspaceCatalogUpdateResponseList._
import org.broadinstitute.starfire.model.WorkspaceIngest
import org.broadinstitute.starfire.model.WorkspaceIngest._
import org.broadinstitute.starfire.model.WorkspaceTag
import org.broadinstitute.starfire.model.WorkspaceTag._

import sttp.client._
import sttp.client.circe._
import io.circe.generic.auto._

import io.swagger.sttp.utils.Decoders._
import io.swagger.sttp.utils.Encoders._
import io.swagger.sttp.utils.SttpUtils.Implicits._

object WorkspacesApi {

  /**
   * TSV file containing workspace attributes (allows cookie-based authentication) 
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @return Option[File]
   */
  def browserDownloadAttributes(
    workspaceNamespace: String,
    workspaceName: String): Request[Either[ResponseError[io.circe.Error],File],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling WorkspacesApi->browserDownloadAttributes")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling WorkspacesApi->browserDownloadAttributes")

    basicRequest
      .get(uri"https://api.firecloud.org/cookie-authed/workspaces/${workspaceNamespace}/${workspaceName}/exportAttributesTSV")
      .response(asJson[File])
  }

  /**
   * Sends notifications for change to workspace
   * 
   *
   * @param workspaceNamespace workspace namespace 
   * @param workspaceName workspace name 
   * @return Option[io.circe.Json]
   */
  def changedWorkspaceNotification(
    workspaceNamespace: String,
    workspaceName: String): Request[Either[ResponseError[io.circe.Error],io.circe.Json],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling WorkspacesApi->changedWorkspaceNotification")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling WorkspacesApi->changedWorkspaceNotification")

    basicRequest
      .post(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/sendChangeNotification")
      .response(asJson[io.circe.Json])
  }

  /**
   * Clone Workspace
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @param workspace Cloned workspace information 
   * @return Option[io.circe.Json]
   */
  def cloneWorkspace(
    workspaceNamespace: String,
    workspaceName: String,
    workspace: WorkspaceIngest): Request[Either[ResponseError[io.circe.Error],io.circe.Json],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling WorkspacesApi->cloneWorkspace")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling WorkspacesApi->cloneWorkspace")
    assert(workspace != null, "Missing required parameter 'workspace' when calling WorkspacesApi->cloneWorkspace")

    basicRequest
      .post(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/clone")
      .body(workspace)
      .response(asJson[io.circe.Json])
  }

  /**
   * Create workspace
   * 
   *
   * @param workspace New workspace information 
   * @return Option[io.circe.Json]
   */
  def createWorkspace(
    workspace: WorkspaceIngest): Request[Either[ResponseError[io.circe.Error],io.circe.Json],Nothing] = {
    assert(workspace != null, "Missing required parameter 'workspace' when calling WorkspacesApi->createWorkspace")

    basicRequest
      .post(uri"https://api.firecloud.org/api/workspaces")
      .body(workspace)
      .response(asJson[io.circe.Json])
  }

  /**
   * Delete workspace
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @return Option[io.circe.Json]
   */
  def deleteWorkspace(
    workspaceNamespace: String,
    workspaceName: String): Request[Either[ResponseError[io.circe.Error],io.circe.Json],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling WorkspacesApi->deleteWorkspace")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling WorkspacesApi->deleteWorkspace")

    basicRequest
      .delete(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}")
      .response(asJson[io.circe.Json])
  }

  /**
   * Remove the user-supplied tags from the workspace. 
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @param tags List of tags. 
   * @return Option[StringArray]
   */
  def deleteWorkspaceTags(
    workspaceNamespace: String,
    workspaceName: String,
    tags: StringArray): Request[Either[ResponseError[io.circe.Error],StringArray],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling WorkspacesApi->deleteWorkspaceTags")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling WorkspacesApi->deleteWorkspaceTags")
    assert(tags != null, "Missing required parameter 'tags' when calling WorkspacesApi->deleteWorkspaceTags")

    basicRequest
      .delete(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/tags")
      .body(tags)
      .response(asJson[StringArray])
  }

  /**
   * TSV file containing workspace attributes 
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @return Option[File]
   */
  def exportAttributesTSV(
    workspaceNamespace: String,
    workspaceName: String): Request[Either[ResponseError[io.circe.Error],File],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling WorkspacesApi->exportAttributesTSV")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling WorkspacesApi->exportAttributesTSV")

    basicRequest
      .get(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/exportAttributesTSV")
      .response(asJson[File])
  }

  /**
   * Get bucket usage
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @return Option[io.circe.Json]
   */
  def getBucketUsage(
    workspaceNamespace: String,
    workspaceName: String): Request[Either[ResponseError[io.circe.Error],io.circe.Json],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling WorkspacesApi->getBucketUsage")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling WorkspacesApi->getBucketUsage")

    basicRequest
      .get(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/bucketUsage")
      .response(asJson[io.circe.Json])
  }

  /**
   * Get workspace catalog permission
   * Get catalog permissions for a workspace
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @return Option[List[WorkspaceCatalog]]
   */
  def getCatalog(
    workspaceNamespace: String,
    workspaceName: String): Request[Either[ResponseError[io.circe.Error],List[WorkspaceCatalog]],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling WorkspacesApi->getCatalog")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling WorkspacesApi->getCatalog")

    basicRequest
      .get(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/catalog")
      .response(asJson[List[WorkspaceCatalog]])
  }

  /**
   * Calculate an estimate of the monthly storage cost for the workspace bucket
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @return Option[io.circe.Json]
   */
  def getStorageCostEstimate(
    workspaceNamespace: String,
    workspaceName: String): Request[Either[ResponseError[io.circe.Error],io.circe.Json],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling WorkspacesApi->getStorageCostEstimate")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling WorkspacesApi->getStorageCostEstimate")

    basicRequest
      .get(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/storageCostEstimate")
      .response(asJson[io.circe.Json])
  }

  /**
   * Get all tags used in FireCloud (for autocomplete) 
   * list of all tags used in FireCloud and their associated frequencies
   *
   * @param q Query string (optional)
   * @return Option[List[WorkspaceTag]]
   */
  def getTags(
    q: Option[String] = None
    ): Request[Either[ResponseError[io.circe.Error],List[WorkspaceTag]],Nothing] = {

    basicRequest
      .get(uri"https://api.firecloud.org/api/workspaces/tags?q=${q}")
      .response(asJson[List[WorkspaceTag]])
  }

  /**
   * Get workspace
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @param fields When specified, include only these keys in the response payload and exclude other keys. Accepts a comma-delimited list of values. To include a nested key, specify the key&#39;s path using a dot delimiter; for example, to include {\&quot;workspace\&quot;: {\&quot;attributes\&quot;: {}}}, specify \&quot;workspace.attributes\&quot;. Legal values are any first-level key in the response, any first-level key inside the {\&quot;workspace\&quot;: {}} object, and any first-level key inside the {\&quot;workspace\&quot;: {\&quot;attributes\&quot;: {}}} object. If omitted, will return the full response payload.  (optional)
   * @return Option[io.circe.Json]
   */
  def getWorkspace(
    workspaceNamespace: String,
    workspaceName: String,
    fields: Option[List[String]] = None
    ): Request[Either[ResponseError[io.circe.Error],io.circe.Json],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling WorkspacesApi->getWorkspace")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling WorkspacesApi->getWorkspace")

    basicRequest
      .get(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}?fields=${fields}")
      .response(asJson[io.circe.Json])
  }

  /**
   * Get workspace access instructions (if any)
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @return Option[List[ManagedGroupAccessInstructions]]
   */
  def getWorkspaceAccessInstructions(
    workspaceNamespace: String,
    workspaceName: String): Request[Either[ResponseError[io.circe.Error],List[ManagedGroupAccessInstructions]],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling WorkspacesApi->getWorkspaceAccessInstructions")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling WorkspacesApi->getWorkspaceAccessInstructions")

    basicRequest
      .get(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/accessInstructions")
      .response(asJson[List[ManagedGroupAccessInstructions]])
  }

  /**
   * Get workspace ACL
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @return Option[WorkspaceACL]
   */
  def getWorkspaceAcl(
    workspaceNamespace: String,
    workspaceName: String): Request[Either[ResponseError[io.circe.Error],WorkspaceACL],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling WorkspacesApi->getWorkspaceAcl")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling WorkspacesApi->getWorkspaceAcl")

    basicRequest
      .get(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/acl")
      .response(asJson[WorkspaceACL])
  }

  /**
   * Get metadata about the workspace bucket
   * Returns metadata about the workspace bucket.
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @return Option[WorkspaceBucketOptions]
   */
  def getWorkspaceBucketOptions(
    workspaceNamespace: String,
    workspaceName: String): Request[Either[ResponseError[io.circe.Error],WorkspaceBucketOptions],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling WorkspacesApi->getWorkspaceBucketOptions")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling WorkspacesApi->getWorkspaceBucketOptions")

    basicRequest
      .get(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/bucketOptions")
      .response(asJson[WorkspaceBucketOptions])
  }

  /**
   * Get the tags for this workspace. 
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @return Option[StringArray]
   */
  def getWorkspaceTags(
    workspaceNamespace: String,
    workspaceName: String): Request[Either[ResponseError[io.circe.Error],StringArray],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling WorkspacesApi->getWorkspaceTags")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling WorkspacesApi->getWorkspaceTags")

    basicRequest
      .get(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/tags")
      .response(asJson[StringArray])
  }

  /**
   * Import workspace attributes from a tsv file
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @param attributes A valid TSV import file 
   * @return Option[io.circe.Json]
   */
  def importAttributesTSV(
    workspaceNamespace: String,
    workspaceName: String,
    attributes: File): Request[Either[ResponseError[io.circe.Error],io.circe.Json],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling WorkspacesApi->importAttributesTSV")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling WorkspacesApi->importAttributesTSV")
    assert(attributes != null, "Missing required parameter 'attributes' when calling WorkspacesApi->importAttributesTSV")

    basicRequest
      .post(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/importAttributesTSV")
      .response(asJson[io.circe.Json])
  }

  /**
   * List method configurations in a workspace
   * List method configurations in a workspace. By default, only Agora method configs are returned. To return configs for all repos, specify &#x60;allRepos&#x60; to be &#x60;true&#x60;.  #### Expanded discussion on the methodRepoMethod field  This endpoint returns method references to Agora in the format &#x60;&#x60;&#x60; \&quot;methodRepoMethod\&quot;: {   \&quot;methodNamespace\&quot;: \&quot;namespace\&quot;,   \&quot;methodName\&quot;: \&quot;name\&quot;,   \&quot;methodVersion\&quot;: 1,   \&quot;sourceRepo\&quot;: \&quot;agora\&quot;,   \&quot;methodUri\&quot;: \&quot;agora://namespace/name/1\&quot; } &#x60;&#x60;&#x60; and for Dockstore in the format &#x60;&#x60;&#x60; \&quot;methodRepoMethod\&quot;: {   \&quot;methodPath\&quot;: \&quot;path\&quot;,   \&quot;methodVersion\&quot;: \&quot;version\&quot;,   \&quot;sourceRepo\&quot;: \&quot;agora\&quot;,   \&quot;methodUri\&quot;: \&quot;dockstore://path/version\&quot; } &#x60;&#x60;&#x60; If you are only working with Agora methods, the fields &#x60;\&quot;sourceRepo\&quot;&#x60; and &#x60;\&quot;methodUri\&quot;&#x60; can be considered informational and do not need to be round-tripped (see the corresponding &#x60;POST /api/workspaces/{workspaceNamespace}/{workspaceName}/methodconfigs&#x60; for more details). 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @param allRepos Configs for all repos, not just Agora (optional, default to false)
   * @return Option[io.circe.Json]
   */
  def listWorkspaceMethodConfigs(
    workspaceNamespace: String,
    workspaceName: String,
    allRepos: Option[Boolean] = Option(false)
    ): Request[Either[ResponseError[io.circe.Error],io.circe.Json],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling WorkspacesApi->listWorkspaceMethodConfigs")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling WorkspacesApi->listWorkspaceMethodConfigs")

    basicRequest
      .get(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/methodconfigs?allRepos=${allRepos}")
      .response(asJson[io.circe.Json])
  }

  /**
   * Lists workspaces. 
   * 
   *
   * @param fields When specified, include only these keys in the response payload and exclude other keys. Accepts a comma-delimited list of values. To include a nested key, specify the key&#39;s path using a dot delimiter; for example, to include {\&quot;workspace\&quot;: {\&quot;attributes\&quot;: {}}}, specify \&quot;workspace.attributes\&quot;. Legal values are any first-level key in the response, any first-level key inside the {\&quot;workspace\&quot;: {}} object, and any first-level key inside the {\&quot;workspace\&quot;: {\&quot;attributes\&quot;: {}}} object. If omitted, will return the full response payload.  (optional)
   * @return Option[io.circe.Json]
   */
  def listWorkspaces(
    fields: Option[List[String]] = None
    ): Request[Either[ResponseError[io.circe.Error],io.circe.Json],Nothing] = {

    basicRequest
      .get(uri"https://api.firecloud.org/api/workspaces?fields=${fields}")
      .response(asJson[io.circe.Json])
  }

  /**
   * Lock Workspace
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @return Option[io.circe.Json]
   */
  def lockWorkspace(
    workspaceNamespace: String,
    workspaceName: String): Request[Either[ResponseError[io.circe.Error],io.circe.Json],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling WorkspacesApi->lockWorkspace")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling WorkspacesApi->lockWorkspace")

    basicRequest
      .put(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/lock")
      .response(asJson[io.circe.Json])
  }

  /**
   * Add tags to the workspace without modifying pre-existing tags. 
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @param tags List of tags. 
   * @return Option[StringArray]
   */
  def patchWorkspaceTags(
    workspaceNamespace: String,
    workspaceName: String,
    tags: StringArray): Request[Either[ResponseError[io.circe.Error],StringArray],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling WorkspacesApi->patchWorkspaceTags")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling WorkspacesApi->patchWorkspaceTags")
    assert(tags != null, "Missing required parameter 'tags' when calling WorkspacesApi->patchWorkspaceTags")

    basicRequest
      .patch(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/tags")
      .body(tags)
      .response(asJson[StringArray])
  }

  /**
   * Create a Method Configuration in a workspace
   * Create method configurations. #### Expanded discussion on the methodRepoMethod field To create a method config for an Agora method, &#x60;\&quot;sourceRepo\&quot;: \&quot;agora\&quot;&#x60; is optional; the following is sufficient: &#x60;&#x60;&#x60; \&quot;methodRepoMethod\&quot;: {   \&quot;methodNamespace\&quot;: \&quot;namespace\&quot;,   \&quot;methodName\&quot;: \&quot;name\&quot;,   \&quot;methodVersion\&quot;: 1 } &#x60;&#x60;&#x60; To create a method config for a Dockstore method, &#x60;\&quot;sourceRepo\&quot;: \&quot;dockstore\&quot;&#x60; is required: &#x60;&#x60;&#x60; \&quot;methodRepoMethod\&quot;: {   \&quot;sourceRepo\&quot;: \&quot;dockstore\&quot;,   \&quot;methodPath\&quot;: \&quot;path\&quot;,   \&quot;methodVersion\&quot;: \&quot;version\&quot; } &#x60;&#x60;&#x60; You may also use the URI on its own to create a config referencing any supported repo (currently Agora and Dockstore): &#x60;&#x60;&#x60; \&quot;methodRepoMethod\&quot;: {   \&quot;methodUri\&quot;: \&quot;agora://namespace/name/1\&quot; } &#x60;&#x60;&#x60; &#x60;&#x60;&#x60; \&quot;methodRepoMethod\&quot;: {   \&quot;methodUri\&quot;: \&quot;dockstore://path/version\&quot; } &#x60;&#x60;&#x60; The system is specified to check for a URI first before falling back to the legacy fields. Unsupported repos will return a 400 Bad Request. 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @param methodConfigJson Method Configuration contents 
   * @return Option[io.circe.Json]
   */
  def postWorkspaceMethodConfig(
    workspaceNamespace: String,
    workspaceName: String,
    methodConfigJson: NewMethodConfigIngest): Request[Either[ResponseError[io.circe.Error],io.circe.Json],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling WorkspacesApi->postWorkspaceMethodConfig")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling WorkspacesApi->postWorkspaceMethodConfig")
    assert(methodConfigJson != null, "Missing required parameter 'methodConfigJson' when calling WorkspacesApi->postWorkspaceMethodConfig")

    basicRequest
      .post(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/methodconfigs")
      .body(methodConfigJson)
      .response(asJson[io.circe.Json])
  }

  /**
   * Replace all tags for this workspace with the user input. 
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @param tags List of tags. 
   * @return Option[StringArray]
   */
  def putWorkspaceTags(
    workspaceNamespace: String,
    workspaceName: String,
    tags: StringArray): Request[Either[ResponseError[io.circe.Error],StringArray],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling WorkspacesApi->putWorkspaceTags")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling WorkspacesApi->putWorkspaceTags")
    assert(tags != null, "Missing required parameter 'tags' when calling WorkspacesApi->putWorkspaceTags")

    basicRequest
      .put(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/tags")
      .body(tags)
      .response(asJson[StringArray])
  }

  /**
   * Read workspace bucket
   * Read a workspace bucket
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @return Option[io.circe.Json]
   */
  def readBucket(
    workspaceNamespace: String,
    workspaceName: String): Request[Either[ResponseError[io.circe.Error],io.circe.Json],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling WorkspacesApi->readBucket")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling WorkspacesApi->readBucket")

    basicRequest
      .get(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/checkBucketReadAccess")
      .response(asJson[io.circe.Json])
  }

  /**
   * Set attributes on a workspace. 
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @param newAttributes New attribute values, as Map[String, Attribute]. WARNING! This should not be used to change library metadata (republish will not happen). Use UpdateAttributes in the library section 
   * @return Option[io.circe.Json]
   */
  def setAttributes(
    workspaceNamespace: String,
    workspaceName: String,
    newAttributes: Json): Request[Either[ResponseError[io.circe.Error],io.circe.Json],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling WorkspacesApi->setAttributes")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling WorkspacesApi->setAttributes")
    assert(newAttributes != null, "Missing required parameter 'newAttributes' when calling WorkspacesApi->setAttributes")

    basicRequest
      .patch(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/setAttributes")
      .body(newAttributes)
      .response(asJson[io.circe.Json])
  }

  /**
   * Unlock Workspace
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @return Option[io.circe.Json]
   */
  def unlockWorkspace(
    workspaceNamespace: String,
    workspaceName: String): Request[Either[ResponseError[io.circe.Error],io.circe.Json],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling WorkspacesApi->unlockWorkspace")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling WorkspacesApi->unlockWorkspace")

    basicRequest
      .put(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/unlock")
      .response(asJson[io.circe.Json])
  }

  /**
   * Modify attributes on a workspace. 
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @param workspaceUpdateJson Attribute operations. WARNING! This should not be used to change library metadata (republish will not happen). Use UpdateAttributes in the library section. 
   * @return Option[io.circe.Json]
   */
  def updateAttributes(
    workspaceNamespace: String,
    workspaceName: String,
    workspaceUpdateJson: List[AttributeUpdateOperation]): Request[Either[ResponseError[io.circe.Error],io.circe.Json],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling WorkspacesApi->updateAttributes")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling WorkspacesApi->updateAttributes")
    assert(workspaceUpdateJson != null, "Missing required parameter 'workspaceUpdateJson' when calling WorkspacesApi->updateAttributes")

    basicRequest
      .patch(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/updateAttributes")
      .body(workspaceUpdateJson)
      .response(asJson[io.circe.Json])
  }

  /**
   * Update catalog permission
   * Set catalog permisisons for a workspace
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @param catalogUpdates Series of Catalog updates for workspace 
   * @return Option[WorkspaceCatalogUpdateResponseList]
   */
  def updateCatalog(
    workspaceNamespace: String,
    workspaceName: String,
    catalogUpdates: List[WorkspaceCatalog]): Request[Either[ResponseError[io.circe.Error],WorkspaceCatalogUpdateResponseList],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling WorkspacesApi->updateCatalog")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling WorkspacesApi->updateCatalog")
    assert(catalogUpdates != null, "Missing required parameter 'catalogUpdates' when calling WorkspacesApi->updateCatalog")

    basicRequest
      .patch(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/catalog")
      .body(catalogUpdates)
      .response(asJson[WorkspaceCatalogUpdateResponseList])
  }

  /**
   * Update workspace ACL
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @param inviteUsersNotFound true to invite unregistered users, false to ignore 
   * @param aclUpdates Series of ACL updates for workspace 
   * @return Option[WorkspaceACLUpdateResponseList]
   */
  def updateWorkspaceACL(
    workspaceNamespace: String,
    workspaceName: String,
    inviteUsersNotFound: Boolean = false,
    aclUpdates: List[WorkspaceACLUpdate]): Request[Either[ResponseError[io.circe.Error],WorkspaceACLUpdateResponseList],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling WorkspacesApi->updateWorkspaceACL")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling WorkspacesApi->updateWorkspaceACL")
    assert(aclUpdates != null, "Missing required parameter 'aclUpdates' when calling WorkspacesApi->updateWorkspaceACL")

    basicRequest
      .patch(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/acl?inviteUsersNotFound=${inviteUsersNotFound}")
      .body(aclUpdates)
      .response(asJson[WorkspaceACLUpdateResponseList])
  }

  /**
   * Retrieve user permissions for the workspace and the workspace&#39;s method references
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @param reportInput Users and/or configs on which to report, both optional 
   * @return Option[PermissionReport]
   */
  def workspacePermissionReport(
    workspaceNamespace: String,
    workspaceName: String,
    reportInput: PermissionReportRequest): Request[Either[ResponseError[io.circe.Error],PermissionReport],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling WorkspacesApi->workspacePermissionReport")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling WorkspacesApi->workspacePermissionReport")
    assert(reportInput != null, "Missing required parameter 'reportInput' when calling WorkspacesApi->workspacePermissionReport")

    basicRequest
      .post(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/permissionReport")
      .body(reportInput)
      .response(asJson[PermissionReport])
  }

}

