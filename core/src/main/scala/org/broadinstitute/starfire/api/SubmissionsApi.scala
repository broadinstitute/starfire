/**
 * FireCloud
 * Genome analysis execution service. 
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.broadinstitute.starfire.api

import org.broadinstitute.starfire.model.ErrorReport
import org.broadinstitute.starfire.model.ErrorReport._
import org.broadinstitute.starfire.model.Submission
import org.broadinstitute.starfire.model.Submission._
import org.broadinstitute.starfire.model.SubmissionRequest
import org.broadinstitute.starfire.model.SubmissionRequest._
import org.broadinstitute.starfire.model.SubmissionValidationReport
import org.broadinstitute.starfire.model.SubmissionValidationReport._
import org.broadinstitute.starfire.model.SubmissionsCountResponse
import org.broadinstitute.starfire.model.SubmissionsCountResponse._
import org.broadinstitute.starfire.model.WorkflowCost
import org.broadinstitute.starfire.model.WorkflowCost._
import org.broadinstitute.starfire.model.WorkflowQueueStatusResponse
import org.broadinstitute.starfire.model.WorkflowQueueStatusResponse._

import sttp.client._
import sttp.client.circe._
import io.circe.generic.auto._

import io.swagger.sttp.utils.Decoders._
import io.swagger.sttp.utils.Encoders._
import io.swagger.sttp.utils.SttpUtils.Implicits._

object SubmissionsApi {

  /**
   * abort a submission 
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @param submissionId Submission ID 
   * @return Option[Unit]
   */
  def abortSubmission(
    workspaceNamespace: String,
    workspaceName: String,
    submissionId: String): Request[Either[ResponseError[io.circe.Error],Unit],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling SubmissionsApi->abortSubmission")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling SubmissionsApi->abortSubmission")
    assert(submissionId != null, "Missing required parameter 'submissionId' when calling SubmissionsApi->abortSubmission")

    basicRequest
      .delete(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/submissions/${submissionId}")
      .response(asJson[Unit])
  }

  /**
   * Count submissions by status
   * Counts all submissions run in the workspace, grouped by status. Returns a map of status:count.
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @return Option[SubmissionsCountResponse]
   */
  def countSubmissions(
    workspaceNamespace: String,
    workspaceName: String): Request[Either[ResponseError[io.circe.Error],SubmissionsCountResponse],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling SubmissionsApi->countSubmissions")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling SubmissionsApi->countSubmissions")

    basicRequest
      .get(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/submissionsCount")
      .response(asJson[SubmissionsCountResponse])
  }

  /**
   * Create a submission. 
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @param submission Post Submission 
   * @return Option[Unit]
   */
  def createSubmission(
    workspaceNamespace: String,
    workspaceName: String,
    submission: SubmissionRequest): Request[Either[ResponseError[io.circe.Error],Unit],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling SubmissionsApi->createSubmission")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling SubmissionsApi->createSubmission")
    assert(submission != null, "Missing required parameter 'submission' when calling SubmissionsApi->createSubmission")

    basicRequest
      .post(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/submissions")
      .body(submission)
      .response(asJson[Unit])
  }

  /**
   * List submissions. 
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @return Option[Unit]
   */
  def listSubmissions(
    workspaceNamespace: String,
    workspaceName: String): Request[Either[ResponseError[io.circe.Error],Unit],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling SubmissionsApi->listSubmissions")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling SubmissionsApi->listSubmissions")

    basicRequest
      .get(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/submissions")
      .response(asJson[Unit])
  }

  /**
   * Monitor submission status 
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @param submissionId Submission ID 
   * @return Option[Submission]
   */
  def monitorSubmission(
    workspaceNamespace: String,
    workspaceName: String,
    submissionId: String): Request[Either[ResponseError[io.circe.Error],Submission],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling SubmissionsApi->monitorSubmission")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling SubmissionsApi->monitorSubmission")
    assert(submissionId != null, "Missing required parameter 'submissionId' when calling SubmissionsApi->monitorSubmission")

    basicRequest
      .get(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/submissions/${submissionId}")
      .response(asJson[Submission])
  }

  /**
   * Validate submission
   * Validate expression syntax for a submission
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @param submission Description of a submission. 
   * @return Option[SubmissionValidationReport]
   */
  def validateSubmission(
    workspaceNamespace: String,
    workspaceName: String,
    submission: SubmissionRequest): Request[Either[ResponseError[io.circe.Error],SubmissionValidationReport],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling SubmissionsApi->validateSubmission")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling SubmissionsApi->validateSubmission")
    assert(submission != null, "Missing required parameter 'submission' when calling SubmissionsApi->validateSubmission")

    basicRequest
      .post(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/submissions/validate")
      .body(submission)
      .response(asJson[SubmissionValidationReport])
  }

  /**
   * Retrieve workflow cost, if available. 
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @param submissionId Submission ID 
   * @param workflowId Workflow ID 
   * @return Option[WorkflowCost]
   */
  def workflowCostInSubmission(
    workspaceNamespace: String,
    workspaceName: String,
    submissionId: String,
    workflowId: String): Request[Either[ResponseError[io.circe.Error],WorkflowCost],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling SubmissionsApi->workflowCostInSubmission")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling SubmissionsApi->workflowCostInSubmission")
    assert(submissionId != null, "Missing required parameter 'submissionId' when calling SubmissionsApi->workflowCostInSubmission")
    assert(workflowId != null, "Missing required parameter 'workflowId' when calling SubmissionsApi->workflowCostInSubmission")

    basicRequest
      .get(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/submissions/${submissionId}/workflows/${workflowId}/cost")
      .response(asJson[WorkflowCost])
  }

  /**
   * Get call-level metadata for workflow
   * Get call-level metadata for workflow
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @param submissionId Submission ID 
   * @param workflowId Workflow ID 
   * @param includeKey When specified, return only these keys in the response. Matches any key in the response, including within nested blocks. May not be used with excludeKey.  (optional)
   * @param excludeKey When specified, omit these keys from the response. Matches any key in the response, including within nested blocks. May not be used with includeKey.  (optional)
   * @param expandSubWorkflows When true, metadata for sub workflows will be fetched and inserted automatically in the metadata response.  (optional, default to false)
   * @return Option[Unit]
   */
  def workflowMetadata(
    workspaceNamespace: String,
    workspaceName: String,
    submissionId: String,
    workflowId: String,
    includeKey: Option[List[String]] = None,
    excludeKey: Option[List[String]] = None,
    expandSubWorkflows: Option[Boolean] = Option(false)
    ): Request[Either[ResponseError[io.circe.Error],Unit],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling SubmissionsApi->workflowMetadata")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling SubmissionsApi->workflowMetadata")
    assert(submissionId != null, "Missing required parameter 'submissionId' when calling SubmissionsApi->workflowMetadata")
    assert(workflowId != null, "Missing required parameter 'workflowId' when calling SubmissionsApi->workflowMetadata")

    basicRequest
      .get(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/submissions/${submissionId}/workflows/${workflowId}?includeKey=${includeKey}?excludeKey=${excludeKey}?expandSubWorkflows=${expandSubWorkflows}")
      .response(asJson[Unit])
  }

  /**
   * Get workflow outputs. 
   * 
   *
   * @param workspaceNamespace Workspace Namespace 
   * @param workspaceName Workspace Name 
   * @param submissionId Submission ID 
   * @param workflowId Workflow ID 
   * @return Option[Unit]
   */
  def workflowOutputsInSubmission(
    workspaceNamespace: String,
    workspaceName: String,
    submissionId: String,
    workflowId: String): Request[Either[ResponseError[io.circe.Error],Unit],Nothing] = {
    assert(workspaceNamespace != null, "Missing required parameter 'workspaceNamespace' when calling SubmissionsApi->workflowOutputsInSubmission")
    assert(workspaceName != null, "Missing required parameter 'workspaceName' when calling SubmissionsApi->workflowOutputsInSubmission")
    assert(submissionId != null, "Missing required parameter 'submissionId' when calling SubmissionsApi->workflowOutputsInSubmission")
    assert(workflowId != null, "Missing required parameter 'workflowId' when calling SubmissionsApi->workflowOutputsInSubmission")

    basicRequest
      .get(uri"https://api.firecloud.org/api/workspaces/${workspaceNamespace}/${workspaceName}/submissions/${submissionId}/workflows/${workflowId}/outputs")
      .response(asJson[Unit])
  }

  /**
   * workflow queue status
   * List workflow counts by queueing state
   *
   * @return Option[WorkflowQueueStatusResponse]
   */
  def workflowQueueStatus(
    ): Request[Either[ResponseError[io.circe.Error],WorkflowQueueStatusResponse],Nothing] = {

    basicRequest
      .get(uri"https://api.firecloud.org/api/submissions/queueStatus")
      .response(asJson[WorkflowQueueStatusResponse])
  }

}

