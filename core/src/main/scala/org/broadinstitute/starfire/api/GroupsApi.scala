/**
 * FireCloud
 * Genome analysis execution service. 
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.broadinstitute.starfire.api

import org.broadinstitute.starfire.model.ErrorReport
import org.broadinstitute.starfire.model.ErrorReport._
import org.broadinstitute.starfire.model.ManagedGroupAccessResponse
import org.broadinstitute.starfire.model.ManagedGroupAccessResponse._
import org.broadinstitute.starfire.model.ManagedGroupWithMembers
import org.broadinstitute.starfire.model.ManagedGroupWithMembers._

import sttp.client._
import sttp.client.circe._
import io.circe.generic.auto._

import io.swagger.sttp.utils.Decoders._
import io.swagger.sttp.utils.Encoders._
import io.swagger.sttp.utils.SttpUtils.Implicits._

object GroupsApi {

  /**
   * add a user to a group the caller owns
   * 
   *
   * @param groupName Group name 
   * @param role role of user for group 
   * @param email email of user or group to add 
   * @return Option[Unit]
   */
  def addUserToGroup(
    groupName: String,
    role: String,
    email: String): Request[Either[ResponseError[io.circe.Error],Unit],Nothing] = {
    assert(groupName != null, "Missing required parameter 'groupName' when calling GroupsApi->addUserToGroup")
    assert(role != null, "Missing required parameter 'role' when calling GroupsApi->addUserToGroup")
    assert(email != null, "Missing required parameter 'email' when calling GroupsApi->addUserToGroup")

    basicRequest
      .put(uri"https://api.firecloud.org/api/groups/${groupName}/${role}/${email}")
      .response(asJson[Unit])
  }

  /**
   * create a new group
   * 
   *
   * @param groupName Group name 
   * @return Option[ManagedGroupWithMembers]
   */
  def createGroup(
    groupName: String): Request[Either[ResponseError[io.circe.Error],ManagedGroupWithMembers],Nothing] = {
    assert(groupName != null, "Missing required parameter 'groupName' when calling GroupsApi->createGroup")

    basicRequest
      .post(uri"https://api.firecloud.org/api/groups/${groupName}")
      .response(asJson[ManagedGroupWithMembers])
  }

  /**
   * delete a group that the caller owns
   * 
   *
   * @param groupName Group name 
   * @return Option[Unit]
   */
  def deleteGroup(
    groupName: String): Request[Either[ResponseError[io.circe.Error],Unit],Nothing] = {
    assert(groupName != null, "Missing required parameter 'groupName' when calling GroupsApi->deleteGroup")

    basicRequest
      .delete(uri"https://api.firecloud.org/api/groups/${groupName}")
      .response(asJson[Unit])
  }

  /**
   * view the members in a group
   * 
   *
   * @param groupName Group name 
   * @return Option[ManagedGroupWithMembers]
   */
  def getGroup(
    groupName: String): Request[Either[ResponseError[io.circe.Error],ManagedGroupWithMembers],Nothing] = {
    assert(groupName != null, "Missing required parameter 'groupName' when calling GroupsApi->getGroup")

    basicRequest
      .get(uri"https://api.firecloud.org/api/groups/${groupName}")
      .response(asJson[ManagedGroupWithMembers])
  }

  /**
   * get the list of the groups that the caller is a member of
   * 
   *
   * @return Option[List[ManagedGroupAccessResponse]]
   */
  def getGroups(
    ): Request[Either[ResponseError[io.circe.Error],List[ManagedGroupAccessResponse]],Nothing] = {

    basicRequest
      .get(uri"https://api.firecloud.org/api/groups")
      .response(asJson[List[ManagedGroupAccessResponse]])
  }

  /**
   * remove a user from a group the caller owns
   * 
   *
   * @param groupName Group name 
   * @param role role of user for group 
   * @param email email of user or group to add 
   * @return Option[Unit]
   */
  def removeUserFromGroup(
    groupName: String,
    role: String,
    email: String): Request[Either[ResponseError[io.circe.Error],Unit],Nothing] = {
    assert(groupName != null, "Missing required parameter 'groupName' when calling GroupsApi->removeUserFromGroup")
    assert(role != null, "Missing required parameter 'role' when calling GroupsApi->removeUserFromGroup")
    assert(email != null, "Missing required parameter 'email' when calling GroupsApi->removeUserFromGroup")

    basicRequest
      .delete(uri"https://api.firecloud.org/api/groups/${groupName}/${role}/${email}")
      .response(asJson[Unit])
  }

  /**
   * request access to a group
   * 
   *
   * @param groupName Group name 
   * @return Option[Unit]
   */
  def requestAccessToGroup(
    groupName: String): Request[Either[ResponseError[io.circe.Error],Unit],Nothing] = {
    assert(groupName != null, "Missing required parameter 'groupName' when calling GroupsApi->requestAccessToGroup")

    basicRequest
      .post(uri"https://api.firecloud.org/api/groups/${groupName}/requestAccess")
      .response(asJson[Unit])
  }

}

