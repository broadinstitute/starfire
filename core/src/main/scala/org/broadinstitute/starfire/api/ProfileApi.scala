/**
 * FireCloud
 * Genome analysis execution service. 
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.broadinstitute.starfire.api

import org.broadinstitute.starfire.model.BillingAccount
import org.broadinstitute.starfire.model.BillingAccount._
import org.broadinstitute.starfire.model.BillingAccountRedirect
import org.broadinstitute.starfire.model.BillingAccountRedirect._
import org.broadinstitute.starfire.model.BillingProjectMembership
import org.broadinstitute.starfire.model.BillingProjectMembership._
import org.broadinstitute.starfire.model.BillingProjectStatus
import org.broadinstitute.starfire.model.BillingProjectStatus._
import org.broadinstitute.starfire.model.CuratorStatus
import org.broadinstitute.starfire.model.CuratorStatus._
import org.broadinstitute.starfire.model.ErrorReport
import org.broadinstitute.starfire.model.ErrorReport._
import io.circe.Json
import io.circe.Json._
import org.broadinstitute.starfire.model.Me
import org.broadinstitute.starfire.model.Me._
import org.broadinstitute.starfire.model.Profile
import org.broadinstitute.starfire.model.Profile._
import org.broadinstitute.starfire.model.RawlsMe
import org.broadinstitute.starfire.model.RawlsMe._
import org.broadinstitute.starfire.model.RegisterProfile
import org.broadinstitute.starfire.model.RegisterProfile._
import org.broadinstitute.starfire.model.TerraPreference
import org.broadinstitute.starfire.model.TerraPreference._
import org.broadinstitute.starfire.model.UserImportPermission
import org.broadinstitute.starfire.model.UserImportPermission._

import sttp.client._
import sttp.client.circe._
import io.circe.generic.auto._

import org.broadinstitute.starfire.Decoders._
import org.broadinstitute.starfire.Encoders._
import org.broadinstitute.starfire.SttpUtils.Implicits._

class ProfileApi() {

  /**
   * List billing projects for a user
   * 
   *
   * @return Option[List[BillingProjectMembership]]
   */
  def billing(
    ): Request[Either[ResponseError[io.circe.Error],List[BillingProjectMembership]],Nothing] = {

    basicRequest
      .get(uri"https://localhost/api/profile/billing")
      .response(asJson[List[BillingProjectMembership]])
  }

  /**
   * List billing accounts for a user
   * 
   *
   * @return Option[List[BillingAccount]]
   */
  def billingAccounts(
    ): Request[Either[ResponseError[io.circe.Error],List[BillingAccount]],Nothing] = {

    basicRequest
      .get(uri"https://localhost/api/profile/billingAccounts")
      .response(asJson[List[BillingAccount]])
  }

  /**
   * billing project status
   * billing project status
   *
   * @param projectName Name of the billing project 
   * @return Option[BillingProjectStatus]
   */
  def billingProjectStatus(
    projectName: String): Request[Either[ResponseError[io.circe.Error],BillingProjectStatus],Nothing] = {
    assert(projectName != null, "Missing required parameter 'projectName' when calling ProfileApi->billingProjectStatus")

    basicRequest
      .get(uri"https://localhost/api/profile/billing/${projectName}")
      .response(asJson[BillingProjectStatus])
  }

  /**
   * Returns a list of all keys and values stored in the user profile service for the currently logged-in user.
   * 
   *
   * @return Option[RegisterProfile]
   */
  def getAll(
    ): Request[Either[ResponseError[io.circe.Error],RegisterProfile],Nothing] = {

    basicRequest
      .get(uri"https://localhost/register/profile")
      .response(asJson[RegisterProfile])
  }

  /**
   * Returns the proxy group email for the current user
   * 
   *
   * @param email User email whose proxy group to retrieve 
   * @return Option[String]
   */
  def getProxyGroup(
    email: String): Request[Either[ResponseError[io.circe.Error],String],Nothing] = {
    assert(email != null, "Missing required parameter 'email' when calling ProfileApi->getProxyGroup")

    basicRequest
      .get(uri"https://localhost/api/proxyGroup/${email}")
      .response(asJson[String])
  }

  /**
   * Returns the current user&#39;s preference for Terra UI vs. Legacy view
   * 
   *
   * @return Option[TerraPreference]
   */
  def getTerraPreference(
    ): Request[Either[ResponseError[io.circe.Error],TerraPreference],Nothing] = {

    basicRequest
      .get(uri"https://localhost/api/profile/terra")
      .response(asJson[TerraPreference])
  }

  /**
   * Passes through to the Rawls userinfo API and returns its response
   * 
   *
   * @return Option[RawlsMe]
   */
  def getUserStatus(
    ): Request[Either[ResponseError[io.circe.Error],RawlsMe],Nothing] = {

    basicRequest
      .get(uri"https://localhost/register")
      .response(asJson[RawlsMe])
  }

  /**
   * Check the user&#39;s ability to import a method config into a workspace
   * 
   *
   * @return Option[UserImportPermission]
   */
  def importStatus(
    ): Request[Either[ResponseError[io.circe.Error],UserImportPermission],Nothing] = {

    basicRequest
      .get(uri"https://localhost/api/profile/importstatus")
      .response(asJson[UserImportPermission])
  }

  /**
   * Query to see if you&#39;re a library curator
   * gets the curator status of a user
   *
   * @return Option[CuratorStatus]
   */
  def isCurator(
    ): Request[Either[ResponseError[io.circe.Error],CuratorStatus],Nothing] = {

    basicRequest
      .get(uri"https://localhost/api/library/user/role/curator")
      .response(asJson[CuratorStatus])
  }

  /**
   * Returns registration and activation status for the current user
   * 
   *
   * @return Option[Me]
   */
  def me(
    ): Request[Either[ResponseError[io.circe.Error],Me],Nothing] = {

    basicRequest
      .get(uri"https://localhost/me")
      .response(asJson[Me])
  }

  /**
   * Set userAgreed flag to true
   * 
   *
   * @return Option[Unit]
   */
  def recordUserAgreement(
    ): Request[Either[ResponseError[io.circe.Error],Unit],Nothing] = {

    basicRequest
      .put(uri"https://localhost/api/profile/trial/userAgreement")
      .response(asJson[Unit])
  }

  /**
   * Sets the current user&#39;s preference to use Legacy view, not Terra UI
   * 
   *
   * @return Option[TerraPreference]
   */
  def setFCPreference(
    ): Request[Either[ResponseError[io.circe.Error],TerraPreference],Nothing] = {

    basicRequest
      .delete(uri"https://localhost/api/profile/terra")
      .response(asJson[TerraPreference])
  }

  /**
   * Sets a profile object in the user profile service for the currently logged-in user.
   * 
   *
   * @param profile A complete profile (optional)
   * @return Option[Unit]
   */
  def setProfile(
    profile: Option[Profile] = None
    ): Request[Either[ResponseError[io.circe.Error],Unit],Nothing] = {

    basicRequest
      .post(uri"https://localhost/register/profile")
      .body(profile)
      .response(asJson[Unit])
  }

  /**
   * Sets the current user&#39;s preference to use Terra UI, not Legacy view
   * 
   *
   * @return Option[TerraPreference]
   */
  def setTerraPreference(
    ): Request[Either[ResponseError[io.circe.Error],TerraPreference],Nothing] = {

    basicRequest
      .post(uri"https://localhost/api/profile/terra")
      .response(asJson[TerraPreference])
  }

  /**
   * Update the preferences for the user
   * 
   *
   * @param preferences The preferences to set as a Map[String, String] 
   * @return Option[Unit]
   */
  def updateProfile(
    preferences: Json): Request[Either[ResponseError[io.circe.Error],Unit],Nothing] = {
    assert(preferences != null, "Missing required parameter 'preferences' when calling ProfileApi->updateProfile")

    basicRequest
      .post(uri"https://localhost/api/profile/preferences")
      .body(preferences)
      .response(asJson[Unit])
  }

  /**
   * Passes through to Google&#39;s userinfo API and returns its response
   * See https://developers.google.com/+/web/api/rest/openidconnect/getOpenIdConnect for response info. Userinfo endpoint lives at https://www.googleapis.com/oauth2/v3/userinfo. 
   *
   * @return Option[Unit]
   */
  def userInfo(
    ): Request[Either[ResponseError[io.circe.Error],Unit],Nothing] = {

    basicRequest
      .get(uri"https://localhost/register/userinfo")
      .response(asJson[Unit])
  }

  /**
   * Enroll or Finalize yourself in FireCloud free trial
   * * **Enroll:** starts an enabled user&#39;s trial and adds them to a billing project. * **Finalize:** concludes a terminated user&#39;s trial progress. 
   *
   * @param operation operation user can perform (optional, default to enroll)
   * @return Option[Unit]
   */
  def userTrial(
    operation: Option[String] = Option("enroll")
    ): Request[Either[ResponseError[io.circe.Error],Unit],Nothing] = {

    basicRequest
      .post(uri"https://localhost/api/profile/trial?operation=${operation}")
      .response(asJson[Unit])
  }

}

