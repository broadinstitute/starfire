/**
 * FireCloud
 * Genome analysis execution service. 
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package starfire.terra.api

import java.text.SimpleDateFormat

import starfire.terra.model.Number
import starfire.terra.model.StringArray
import starfire.terra.model.TrialOperationResponse
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class TrialFireCloudCreditsApi(
  val defBasePath: String = "https://localhost",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new TrialFireCloudCreditsApiAsyncHelper(client, config)

  /**
   * Manage projects in the FireCloud Free Credits Program; for managers of the Program only.
   * 
   *
   * @param operation operation to perform on projects. \&quot;Create\&quot; will create projects and verify those projects. \&quot;Verify\&quot; will verify all unverified projects in the pool. \&quot;Count\&quot; will return the number of projects in various statuses. \&quot;Adopt\&quot; will enter a previously-created project into the pool without verifying it. \&quot;Scratch\&quot; will mark a pool project as unavailable/errored and disassociate it from any user that claimed it. \&quot;Report\&quot; will return a report of all claimed projects.  
   * @param count number of projects to create; only used for create operation (optional)
   * @param project name of project to adopt or scratch; only used for adopt and scratch operations (optional)
   * @return void
   */
  def manageTrialProjects(operation: String = "count", count: Option[Number] = None, project: Option[String] = None) = {
    val await = Try(Await.result(manageTrialProjectsAsync(operation, count, project), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Manage projects in the FireCloud Free Credits Program; for managers of the Program only. asynchronously
   * 
   *
   * @param operation operation to perform on projects. \&quot;Create\&quot; will create projects and verify those projects. \&quot;Verify\&quot; will verify all unverified projects in the pool. \&quot;Count\&quot; will return the number of projects in various statuses. \&quot;Adopt\&quot; will enter a previously-created project into the pool without verifying it. \&quot;Scratch\&quot; will mark a pool project as unavailable/errored and disassociate it from any user that claimed it. \&quot;Report\&quot; will return a report of all claimed projects.  
   * @param count number of projects to create; only used for create operation (optional)
   * @param project name of project to adopt or scratch; only used for adopt and scratch operations (optional)
   * @return Future(void)
   */
  def manageTrialProjectsAsync(operation: String = "count", count: Option[Number] = None, project: Option[String] = None) = {
      helper.manageTrialProjects(operation, count, project)
  }

  /**
   * Update user status in the FireCloud Free Credits Program; for managers of the Program only.
   * * **Enable** Add registered user(s) to FireCloud&#39;s internal record of users that are allowed to enroll (of their own accord, by clicking the Enroll button in the UI) * **Disable** If a user has not yet enrolled themselves, we can still remove them from the trial. Reverse of the Enable operation. * **Terminate** End the user&#39;s trial by removing their billing project from the FireCloud Free Credits Program billing account. The user will no longer be able to create workspaces in that billing project. 
   *
   * @param operation operation to perform on the specified users. 
   * @param users list of users on which to operate 
   * @return TrialOperationResponse
   */
  def updateTrialUserStatus(operation: String, users: StringArray): Option[TrialOperationResponse] = {
    val await = Try(Await.result(updateTrialUserStatusAsync(operation, users), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update user status in the FireCloud Free Credits Program; for managers of the Program only. asynchronously
   * * **Enable** Add registered user(s) to FireCloud&#39;s internal record of users that are allowed to enroll (of their own accord, by clicking the Enroll button in the UI) * **Disable** If a user has not yet enrolled themselves, we can still remove them from the trial. Reverse of the Enable operation. * **Terminate** End the user&#39;s trial by removing their billing project from the FireCloud Free Credits Program billing account. The user will no longer be able to create workspaces in that billing project. 
   *
   * @param operation operation to perform on the specified users. 
   * @param users list of users on which to operate 
   * @return Future(TrialOperationResponse)
   */
  def updateTrialUserStatusAsync(operation: String, users: StringArray): Future[TrialOperationResponse] = {
      helper.updateTrialUserStatus(operation, users)
  }

}

class TrialFireCloudCreditsApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def manageTrialProjects(operation: String = "count",
    count: Option[Number] = None,
    project: Option[String] = None
    )(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/api/trial/manager/projects"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (operation == null) throw new Exception("Missing required parameter 'operation' when calling TrialFireCloudCreditsApi->manageTrialProjects")

    queryParams += "operation" -> operation.toString
    count match {
      case Some(param) => queryParams += "count" -> param.toString
      case _ => queryParams
    }
    project match {
      case Some(param) => queryParams += "project" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateTrialUserStatus(operation: String,
    users: StringArray)(implicit reader: ClientResponseReader[TrialOperationResponse], writer: RequestWriter[StringArray]): Future[TrialOperationResponse] = {
    // create path and map variables
    val path = (addFmt("/api/trial/manager/{operation}")
      replaceAll("\\{" + "operation" + "\\}", operation.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (operation == null) throw new Exception("Missing required parameter 'operation' when calling TrialFireCloudCreditsApi->updateTrialUserStatus")

    if (users == null) throw new Exception("Missing required parameter 'users' when calling TrialFireCloudCreditsApi->updateTrialUserStatus")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(users))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
