/**
 * FireCloud
 * Genome analysis execution service. 
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package starfire.terra.api

import java.text.SimpleDateFormat

import java.io.File
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class StorageApi(
  val defBasePath: String = "https://localhost",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new StorageApiAsyncHelper(client, config)

  /**
   * Get metadata about an object stored in GCS. 
   * Returns a subset of the metadata available from Google&#39;s Cloud Storage JSON API, as well as the estimated egress charge to North America. If you need the full metadata, we recommend you use Google&#39;s API directly; see https://cloud.google.com/storage/docs/json_api/v1/objects/get. 
   *
   * @param bucket Name of the bucket in which the object resides. 
   * @param `object` Name of the object. (be sure to urlencode) 
   * @return void
   */
  def getMetadata(bucket: String, `object`: String) = {
    val await = Try(Await.result(getMetadataAsync(bucket, `object`), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get metadata about an object stored in GCS.  asynchronously
   * Returns a subset of the metadata available from Google&#39;s Cloud Storage JSON API, as well as the estimated egress charge to North America. If you need the full metadata, we recommend you use Google&#39;s API directly; see https://cloud.google.com/storage/docs/json_api/v1/objects/get. 
   *
   * @param bucket Name of the bucket in which the object resides. 
   * @param `object` Name of the object. (be sure to urlencode) 
   * @return Future(void)
   */
  def getMetadataAsync(bucket: String, `object`: String) = {
      helper.getMetadata(bucket, `object`)
  }

  /**
   * Download GCS object using a cookie token 
   * **Important**: this file download does not work within the swagger UI. It is here for documentation purposes. You can fill in the fields and submit; once you do so, you will get an error, but swagger will populate the \&quot;Request URL\&quot; field. You can then copy and paste that field into a new tab to achieve your download. 
   *
   * @param bucket Name of the bucket in which the object resides. 
   * @param `object` Name of the object. (be sure to urlencode) 
   * @return File
   */
  def getStorageDownload(bucket: String, `object`: String): Option[File] = {
    val await = Try(Await.result(getStorageDownloadAsync(bucket, `object`), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Download GCS object using a cookie token  asynchronously
   * **Important**: this file download does not work within the swagger UI. It is here for documentation purposes. You can fill in the fields and submit; once you do so, you will get an error, but swagger will populate the \&quot;Request URL\&quot; field. You can then copy and paste that field into a new tab to achieve your download. 
   *
   * @param bucket Name of the bucket in which the object resides. 
   * @param `object` Name of the object. (be sure to urlencode) 
   * @return Future(File)
   */
  def getStorageDownloadAsync(bucket: String, `object`: String): Future[File] = {
      helper.getStorageDownload(bucket, `object`)
  }

}

class StorageApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def getMetadata(bucket: String,
    `object`: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/api/storage/{bucket}/{object}")
      replaceAll("\\{" + "bucket" + "\\}", bucket.toString)
      replaceAll("\\{" + "object" + "\\}", `object`.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (bucket == null) throw new Exception("Missing required parameter 'bucket' when calling StorageApi->getMetadata")

    if (`object` == null) throw new Exception("Missing required parameter '`object`' when calling StorageApi->getMetadata")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getStorageDownload(bucket: String,
    `object`: String)(implicit reader: ClientResponseReader[File]): Future[File] = {
    // create path and map variables
    val path = (addFmt("/cookie-authed/download/b/{bucket}/o/{object}")
      replaceAll("\\{" + "bucket" + "\\}", bucket.toString)
      replaceAll("\\{" + "object" + "\\}", `object`.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (bucket == null) throw new Exception("Missing required parameter 'bucket' when calling StorageApi->getStorageDownload")

    if (`object` == null) throw new Exception("Missing required parameter '`object`' when calling StorageApi->getStorageDownload")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
