/**
 * FireCloud
 * Genome analysis execution service. 
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package starfire.terra.api

import java.text.SimpleDateFormat

import starfire.terra.model.ErrorReport
import starfire.terra.model.ManagedGroupAccessResponse
import starfire.terra.model.ManagedGroupWithMembers
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class GroupsApi(
  val defBasePath: String = "https://localhost",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new GroupsApiAsyncHelper(client, config)

  /**
   * add a user to a group the caller owns
   * 
   *
   * @param groupName Group name 
   * @param role role of user for group 
   * @param email email of user or group to add 
   * @return void
   */
  def addUserToGroup(groupName: String, role: String, email: String) = {
    val await = Try(Await.result(addUserToGroupAsync(groupName, role, email), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * add a user to a group the caller owns asynchronously
   * 
   *
   * @param groupName Group name 
   * @param role role of user for group 
   * @param email email of user or group to add 
   * @return Future(void)
   */
  def addUserToGroupAsync(groupName: String, role: String, email: String) = {
      helper.addUserToGroup(groupName, role, email)
  }

  /**
   * create a new group
   * 
   *
   * @param groupName Group name 
   * @return ManagedGroupWithMembers
   */
  def createGroup(groupName: String): Option[ManagedGroupWithMembers] = {
    val await = Try(Await.result(createGroupAsync(groupName), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * create a new group asynchronously
   * 
   *
   * @param groupName Group name 
   * @return Future(ManagedGroupWithMembers)
   */
  def createGroupAsync(groupName: String): Future[ManagedGroupWithMembers] = {
      helper.createGroup(groupName)
  }

  /**
   * delete a group that the caller owns
   * 
   *
   * @param groupName Group name 
   * @return void
   */
  def deleteGroup(groupName: String) = {
    val await = Try(Await.result(deleteGroupAsync(groupName), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * delete a group that the caller owns asynchronously
   * 
   *
   * @param groupName Group name 
   * @return Future(void)
   */
  def deleteGroupAsync(groupName: String) = {
      helper.deleteGroup(groupName)
  }

  /**
   * view the members in a group
   * 
   *
   * @param groupName Group name 
   * @return ManagedGroupWithMembers
   */
  def getGroup(groupName: String): Option[ManagedGroupWithMembers] = {
    val await = Try(Await.result(getGroupAsync(groupName), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * view the members in a group asynchronously
   * 
   *
   * @param groupName Group name 
   * @return Future(ManagedGroupWithMembers)
   */
  def getGroupAsync(groupName: String): Future[ManagedGroupWithMembers] = {
      helper.getGroup(groupName)
  }

  /**
   * get the list of the groups that the caller is a member of
   * 
   *
   * @return List[ManagedGroupAccessResponse]
   */
  def getGroups(): Option[List[ManagedGroupAccessResponse]] = {
    val await = Try(Await.result(getGroupsAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * get the list of the groups that the caller is a member of asynchronously
   * 
   *
   * @return Future(List[ManagedGroupAccessResponse])
   */
  def getGroupsAsync(): Future[List[ManagedGroupAccessResponse]] = {
      helper.getGroups()
  }

  /**
   * remove a user from a group the caller owns
   * 
   *
   * @param groupName Group name 
   * @param role role of user for group 
   * @param email email of user or group to add 
   * @return void
   */
  def removeUserFromGroup(groupName: String, role: String, email: String) = {
    val await = Try(Await.result(removeUserFromGroupAsync(groupName, role, email), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * remove a user from a group the caller owns asynchronously
   * 
   *
   * @param groupName Group name 
   * @param role role of user for group 
   * @param email email of user or group to add 
   * @return Future(void)
   */
  def removeUserFromGroupAsync(groupName: String, role: String, email: String) = {
      helper.removeUserFromGroup(groupName, role, email)
  }

  /**
   * request access to a group
   * 
   *
   * @param groupName Group name 
   * @return void
   */
  def requestAccessToGroup(groupName: String) = {
    val await = Try(Await.result(requestAccessToGroupAsync(groupName), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * request access to a group asynchronously
   * 
   *
   * @param groupName Group name 
   * @return Future(void)
   */
  def requestAccessToGroupAsync(groupName: String) = {
      helper.requestAccessToGroup(groupName)
  }

}

class GroupsApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def addUserToGroup(groupName: String,
    role: String,
    email: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/api/groups/{groupName}/{role}/{email}")
      replaceAll("\\{" + "groupName" + "\\}", groupName.toString)
      replaceAll("\\{" + "role" + "\\}", role.toString)
      replaceAll("\\{" + "email" + "\\}", email.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (groupName == null) throw new Exception("Missing required parameter 'groupName' when calling GroupsApi->addUserToGroup")

    if (role == null) throw new Exception("Missing required parameter 'role' when calling GroupsApi->addUserToGroup")

    if (email == null) throw new Exception("Missing required parameter 'email' when calling GroupsApi->addUserToGroup")


    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def createGroup(groupName: String)(implicit reader: ClientResponseReader[ManagedGroupWithMembers]): Future[ManagedGroupWithMembers] = {
    // create path and map variables
    val path = (addFmt("/api/groups/{groupName}")
      replaceAll("\\{" + "groupName" + "\\}", groupName.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (groupName == null) throw new Exception("Missing required parameter 'groupName' when calling GroupsApi->createGroup")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteGroup(groupName: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/api/groups/{groupName}")
      replaceAll("\\{" + "groupName" + "\\}", groupName.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (groupName == null) throw new Exception("Missing required parameter 'groupName' when calling GroupsApi->deleteGroup")


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getGroup(groupName: String)(implicit reader: ClientResponseReader[ManagedGroupWithMembers]): Future[ManagedGroupWithMembers] = {
    // create path and map variables
    val path = (addFmt("/api/groups/{groupName}")
      replaceAll("\\{" + "groupName" + "\\}", groupName.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (groupName == null) throw new Exception("Missing required parameter 'groupName' when calling GroupsApi->getGroup")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getGroups()(implicit reader: ClientResponseReader[List[ManagedGroupAccessResponse]]): Future[List[ManagedGroupAccessResponse]] = {
    // create path and map variables
    val path = (addFmt("/api/groups"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def removeUserFromGroup(groupName: String,
    role: String,
    email: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/api/groups/{groupName}/{role}/{email}")
      replaceAll("\\{" + "groupName" + "\\}", groupName.toString)
      replaceAll("\\{" + "role" + "\\}", role.toString)
      replaceAll("\\{" + "email" + "\\}", email.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (groupName == null) throw new Exception("Missing required parameter 'groupName' when calling GroupsApi->removeUserFromGroup")

    if (role == null) throw new Exception("Missing required parameter 'role' when calling GroupsApi->removeUserFromGroup")

    if (email == null) throw new Exception("Missing required parameter 'email' when calling GroupsApi->removeUserFromGroup")


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def requestAccessToGroup(groupName: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/api/groups/{groupName}/requestAccess")
      replaceAll("\\{" + "groupName" + "\\}", groupName.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (groupName == null) throw new Exception("Missing required parameter 'groupName' when calling GroupsApi->requestAccessToGroup")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
